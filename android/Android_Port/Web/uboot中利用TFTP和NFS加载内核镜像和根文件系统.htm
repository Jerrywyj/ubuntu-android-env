<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0053)http://www.cnblogs.com/cjjnjust/articles/1754849.html -->
<html xmlns="http://www.w3.org/1999/xhtml" version="g42dymwpi--nx"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>uboot中利用TFTP和NFS加载内核镜像和根文件系统 - 灰太狼大王 - 博客园</title>
<link type="text/css" rel="stylesheet" href="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/style.css">
<link type="text/css" rel="stylesheet" href="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/common2.css">
<link type="text/css" rel="stylesheet" href="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/shStyle.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/cjjnjust/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/cjjnjust/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/cjjnjust/wlwmanifest.xml">
<script async="" type="text/javascript" src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/gpt.js"></script><script type="text/javascript" async="" src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/ga.js"></script><script src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/jquery.js" type="text/javascript"></script><style type="text/css"></style>  
<script type="text/javascript">
var currentBlogApp = 'cjjnjust';
</script>
<script src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/common.js" type="text/javascript"></script> 
<script src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/json2.js" type="text/javascript"></script>
<script type="text/javascript" src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/syntaxHighlighter.js"></script>
<style>@-moz-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-webkit-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-o-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}embed,object{animation-duration:.001s;-ms-animation-duration:.001s;-moz-animation-duration:.001s;-webkit-animation-duration:.001s;-o-animation-duration:.001s;animation-name:nodeInserted;-ms-animation-name:nodeInserted;-moz-animation-name:nodeInserted;-webkit-animation-name:nodeInserted;-o-animation-name:nodeInserted;}</style><script async="" type="text/javascript" src="http://common.cnblogs.com/script/google_ads_gpt.js"></script></head>
<body contenteditable="true">
<a name="top"></a>

<!--done-->
<div id="mytopmenu"><div class="blogStats"><br></div></div>
<div id="centercontent">
	
	
<!--done-->
<div class="post">
	<div class="postTitle">
		<h1><a id="cb_post_title_url" class="postTitle2" href="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/uboot中利用TFTP和NFS加载内核镜像和根文件系统.htm">uboot中利用TFTP和NFS加载内核镜像和根文件系统</a></h1>
	</div>
	<div id="cnblogs_post_body"><p>主机说明:<br>主机guest 为虚拟机redhat9: IP: 59.64.155.122&nbsp; 网关 59.64.155.1<br>redhat9上已经配置好NFS服务(参考<a href="http://blog.chinaunix.net/u2/80953/showart.php?id=1274973"><span style="color: #0000ff;">http://blog.chinaunix.net/u2/80953/showart.php?id=1274973</span></a>)<br>也已经配置好TFTP服务(参考<a href="http://blog.chinaunix.net/u2/80953/showart.php?id=1274976"><span style="color: #0000ff;">http://blog.chinaunix.net/u2/80953/showart.php?id=1274976</span></a>)<br>NFS服务, TFTP服务都已经启动<br>终端采用主机host XP的超级终端
</p>
<p>实验板说明:<br>MPC8349itx开发板: IP: 59.64.155.244&nbsp; 网关 59.64.155.1<br>开发板eth0为vsc8201芯片，uboot支持驱动，另一芯片为交换交换芯片vsc7385，单独模块驱动。<br>U-Boot-1.1.3 ;&nbsp;&nbsp;&nbsp; Linux kernel-2.6.13<br>内核支持NFS分区(即编译时在File system中选中[*] <span style="color: #0080ff;">Root file system on NFS</span>), 以及支持内核IP_PNP(即编译时在Networking中选中[*]&nbsp;<span style="color: #0080ff;">IP: kernel level autoconfiguration</span>)<br>&nbsp;&nbsp;&nbsp; File systems&nbsp; ---&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Network File Systems&nbsp; ---&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;*&gt; NFS file system support&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 必选<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [*]&nbsp;&nbsp; Provide NFSv3 client support&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 可选<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [*] Root file system on NFS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 必选<br>&nbsp;&nbsp;&nbsp; Networking&nbsp; ---&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [*] Networking support <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Networking options&nbsp; ---&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [*]&nbsp;&nbsp; IP: kernel level autoconfiguration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 必选</p>
<p>***************************************************************************</p>
<p><span style="background-color: #cc3333;">A:</span> NFS启动挂载根文件系统</p>
<p>主机上操作:<br>$ cd /usr/local/mpc8349/<br>$ ./ltib --preconfig config/platform/mpc8349itx/defconfig-min-fs -f<br>&nbsp;&nbsp;&nbsp; ## 依次进入如下选项选择(X) NFS only, 根据情况决定是否选择[ ] read-only root filesystem <br>&nbsp;&nbsp;&nbsp; --- Target Image Generation<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Options&nbsp; ---&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --- Choose your root filesystem image type <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target image: (ext2.gz ramdisk)&nbsp; ---&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 改ramdisk文件系统为NFS<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #0080ff;">(X) NFS only</span> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ ] read-only root filesystem<br>&nbsp;&nbsp;&nbsp; ## 其他情况参考LTIB使用说明(<a href="http://blog.chinaunix.net/u2/80953/showart.php?id=1275002"><span style="color: #0000ff;">http://blog.chinaunix.net/u2/80953/showart.php?id=1275002</span></a>)<br>&nbsp;&nbsp;&nbsp; ## 编译结束后生成的根文件系统是位于当前安装目录下的rootfs (/usr/local/mpc8349/small/rootfs)</p>
<p>$ ln -s /usr/local/mpc8349/small/rootfs&nbsp; /home/liuby/rootfsln&nbsp;&nbsp;&nbsp; ## 建立NFS服务目录软连接<br>$ su - root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 切换到root用户，需要密码<br># echo "/usr/local/mpc8349/small/rootfs&nbsp; 59.64.155.244(rw,sync,no_root_squash)" &gt; /etc/exports&nbsp;&nbsp;&nbsp;&nbsp; ## NFS 服务配置<br># service portmap restart<br># service nfs restart<br># exportfs -arv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 修改的NFS配置生效(exportfs参数顺序不一样，显示有所不同，此顺序显示结果明了)<br># exit</p>
<p><br>实验板上操作:<br>uboot启动后按键进入uboot命令行环境:<br>=&gt; cp.b fef50000 40000 20000; go 40004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 驱动vsc7385芯片<br>=&gt; set serverip 59.64.155.122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 主机地址<br>=&gt; set ipaddr 59.64.155.244&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 实验板地址<br>=&gt; set netmask 255.255.255.0<br>=&gt; set netdev eth0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;## eth0<br>=&gt; ping 59.64.155.122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 测试连通<br>=&gt; set hostname PowerQUICC<br>=&gt; set kernaddr fe810000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## flash中内核起始地址<br>=&gt; set rootpath /usr/local/mpc8349/small/rootfs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## NFS服务根目录<br>=&gt; <span style="color: #0080ff;">setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off console=ttyS0,115200</span><br>=&gt; bootm $kernaddr<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 如果一切正常，内核启动后会启动NFS文件系统作根文件系统。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 测试: 在开发板上创建一个文件，在主机上会看到这个文件生成<br>同样可以简化操作(测试nfs服务软连接目录):<br>=&gt; cp.b fef50000 40000 20000; go 40004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 驱动vsc7385芯片<br>=&gt; setenv ipaddr 59.64.155.244<br>=&gt; setenv bootargs root=/dev/nfs rw nfsroot=59.64.155.122:/home/liuby/rootfsln ip=59.64.155.244:59.64.155.122:255.255.255.0 console=ttyS0,115200 <br>=&gt; bootm fe810000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 内核镜像uImage在FLASH中的存储地址</p>
<p>************************</p>
<p>实验中遇到一个问题，就是bootm之后内核启动，NFS启动挂载文件系统快完成时出现下面这个错误提示<br>RPC: sendmsg returned error 101<br>nfs: RPC call returned error 101<br>后来才发现是文件系统中的启动脚本在启动过程中修改了eth0的ip地址，导致连接不上NFS server<br>后来再测试又发现试图挂载非NFS文件系统目录时也会出现此问题，并且在主机上执行# showmount 命令结果会显示有ip地址(实验板ip地址)挂载。即: 在ltib编译文件系统时选择ext2.gz ramdisk (非NFS only), 最后使用rootfs目录，出现同样的问题。</p>
<p>还有遇到过一个问题，根本无法挂载文件系统，在启动时出现下述提示<br>Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0)<br>&nbsp;&lt;0&gt;Rebooting in 180 seconds..<br>后来发现是 /etc/exports 只有如下一句<br>&nbsp;/home/liuby/rootfs&nbsp; 59.64.155.244(rw,sync,no_root_squash)<br>而没有像下面这样指定根目录的访问权限:<br>&nbsp;/usr/local/mpc8349/small/rootfs&nbsp; 59.64.155.244(rw,sync,no_root_squash)<br>结论: 必须指定NFS文件系统所在目录或其对应的软连接做NFS服务根目录(见下分析)</p>
<p>在NFS文件系统中编译busybox时可以不选择编译mount命令(不建议如此)</p>
<p>nfs总结:<br>如上 /home/liuby/rootfsln是指向/usr/local/mpc8349/small/rootfs的软连接<br># echo "/home/liuby/rootfsln 59.64.155.244(rw,sync,no_root_squash)" &gt; /etc/exports<br># exportfs -arv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 会弹出下面的提示<br>exporting 59.64.155.244:/usr/local/mpc8349/small/rootfs<br>可见 /etc/exports 中语句 /home/liuby/rootfsln 59.64.155.244(rw,sync,no_root_squash) 和 /usr/local/mpc8349/small/rootfs&nbsp; 59.64.155.244(rw,sync,no_root_squash) 是等效的.<br>故: <span style="color: #cc3333;">如果想用不同的文件系统，可以改变这个软连接指向新的文件系统，这比复制文件系统或者修改u-boot环境变量方便多了，并且还不用重新配置/etc/exports。</span><br># echo "/home/liuby/rootfsln 59.64.155.244(rw, sync, no_root_squash)" &gt; /etc/exports<br>$ rm -f /home/liuby/rootfsln<br>$ <span style="color: #0080ff;">ln -s nfs_rootfs_dir_path&nbsp; /home/liuby/rootfsln</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 只需要建立和修改这个软连接即可<br># <span style="color: #0080ff;">exportfs -arv</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 配置生效(<span style="color: #0080ff;">必须</span>)<br>在uboot环境变量中只需设置一次rootpath=/home/liuby/rootfsln, <span style="color: #cc3333;">每次只需在主机上修改此软连接的指向</span>，即可<br>注意权限<br>***************************************************************************</p>
<p><span style="background-color: #ff0000;">B:</span> TFTP下载内核和文件系统镜像到ram中启动</p>
<p>主机上操作:<br>在主机上TFTP根目录为/home/liuby/tftpboot/<br>$ mkdir /home/liuby/tftpboot/image_dir<br>$ cd /usr/local/mpc8349/small/<br>$ ./ltib --preconfig config/platform/mpc8349itx/defconfig-min-fs-modified -f --batch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 编译内核和文件系统镜像<br>$ cp -f rootfs/boot/uImage&nbsp; rootfs.ext2.gz.uboot&nbsp; ~/tftpboot/image_dir/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 复制内核镜像和文件系统镜像到~/tftpboot/image_dir<br>$ cd ~/tftpboot/<br>$ ln -s image_dir/ bootln</p>
<p><br>实验板上操作:<br>=&gt; set serverip 59.64.155.122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 主机地址<br>=&gt; set ipaddr 59.64.155.244&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 实验板地址<br>=&gt; set netmask 255.255.255.0 <br>=&gt; set tftp_path bootln<br>=&gt; ping $serverip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 测试连通<br>=&gt; cp.b fef50000 40000 20000; go 40004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 驱动vsc7385芯片<br>=&gt; setenv loadkernaddr 1000000<br>=&gt; setenv loadramdaddr 1200000<br>=&gt; <span style="color: #0080ff;">tftpboot $loadkernaddr image_dir/uImage</span>&nbsp;&nbsp;&nbsp; ## 下载内核镜像到ram<br>=&gt; tftp $loadramdaddr $tftp_path/rootfs.ext2.gz.uboot&nbsp;&nbsp;&nbsp; ## 下载文件系统镜像到ram<br>=&gt; bootm $loadkernaddr $loadramdaddr&nbsp;&nbsp;&nbsp; ## 启动ram中内核和文件系统镜像</p>
<p>下载不畅时，用CTRL+C来终止回到提示符</p>
<p><br>tftp总结:<br><span style="color: #cc3333;">在TFTP服务根目录下建立目录存储镜像文件，然后创建软连接指向需要下载的镜像目录，这样可以通过修改连接文件即可，而不用每次修改uboot环境变量了</span></p>
<p>***************************************************************************</p>
<p><span style="background-color: #ff0000;">C:</span> TFTP下载内核镜像到ram，NFS挂载根文件系统(target image: NFS only)</p>
<p>主机上利用上面操作的结果，不进行配置。<br>实验板上操作:<br>=&gt; set serverip 59.64.155.122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 主机地址<br>=&gt; set ipaddr 59.64.155.244&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 实验板地址<br>=&gt; set netmask 255.255.255.0 <br>=&gt; set bootargs root=/dev/nfs rw nfsroot=$serverip:/home/liuby/rootfsln ip=$ipaddr:$serverip:$netmask console=ttyS0,115200 <br>=&gt; tftp 1000000 bootln/uImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 下载内核镜像到ram 地址1000000<br>=&gt; bootm 1000000<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## 测试发现内核启动，NFS挂载成功</p>
<p>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<p>简便方法:<br>将下面附录的文件存储为.txt文件，例如取名mpc8349itx_uboot_env.txt<br>用linux命令unix2dos进行转换，然后打开windows XP 超级终端，启动实验板进入uboot命令行环境:<br>点击超级终端界面 "文件"-&gt;"属性"，弹出属性对话框，点击"设置"-&gt;"ASCII码设置"，设置<span style="color: #0099cc;">行延迟20ms，字符延迟1ms</span>；然后点击"发送"-&gt;"<span style="color: #0080ff;">发送文本文件</span>"，选择"mpc8349itx_uboot_env.txt"发送。<br>此操作相当于在uboot命令行输入uboot环境设置参数<br>执行完操作后保存了这些设置，以后每次在uboot启动时不用再敲入一行行的设置参数.</p>
<p>在uboot命令行下执行<br>=&gt; run flashnfsboot<br>相当于 A 操作</p>
<p>在uboot命令行执行<br>=&gt; run tftpramboot<br>相当于执行 B 操作</p>
<p>在uboot命令行执行<br>=&gt; run tftpnfsboot<br>相当于执行 C 操作</p></div></div>
</div>



<script type="text/javascript" src="./uboot中利用TFTP和NFS加载内核镜像和根文件系统_files/google-analytics.js"></script>


<script>(function main() {
        var CONSTANTS = {
            PLAYER_DOM: 'object[data],embed[src],iframe[src]',
            PLAYERS: [
                {
                    find: /http:\/\/static\.youku\.com\/.*q?(player|loader)(_taobao)?\.swf/,
                    replace: 'http://player.opengg.me/loader.swf'
                },
                {
                    find: /http:\/\/js\.tudouui\.com\/.*\/TudouVideoPlayer_Homer_.*.swf/,
                    replace: 'http://player.opengg.me/TudouVideoPlayer_Homer_237.swf'
                },
                {
                    find: /http:\/\/player\.youku\.com\/player\.php\//,
                    replace: 'http://player.opengg.me/player.php/'
                },
                {
                    find: /http:\/\/www.tudou.com\/(([a-z]|programs)\/.*)/,
                    replace: 'http://player.opengg.me/td.php/$1'
                }
            ],
            SHARE_DOM: '#panel_share input,input#copyInput.txt',
            SHARES: [
                {
                    find: /http:\/\/player\.youku\.com\/player\.php\//,
                    replace: 'http://player.opengg.me/player.php/'
                },
                {
                    find: /http:\/\/www.tudou.com\/(.*v\.swf)/,
                    replace: 'http://player.opengg.me/td.php/$1'
                }
            ],
            NODEINSERTED_HACK: '@-moz-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-webkit-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-o-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}embed,object{animation-duration:.001s;-ms-animation-duration:.001s;-moz-animation-duration:.001s;-webkit-animation-duration:.001s;-o-animation-duration:.001s;animation-name:nodeInserted;-ms-animation-name:nodeInserted;-moz-animation-name:nodeInserted;-webkit-animation-name:nodeInserted;-o-animation-name:nodeInserted;}',
            TOGGLE_BTN: '#toggleGoogle'
        };
        var DONE = [];
        var UTIL = {
            addCss: function (str) {
                var style = document.createElement('style');
                style.textContent = str;
                document.head.appendChild(style);
            },
            reloadFlash: function (elem) {
                var nextSibling = elem.nextSibling;
                var parentNode = elem.parentNode;
                parentNode.removeChild(elem);
                if (nextSibling) {
                    parentNode.insertBefore(elem, nextSibling);
                } else {
                    parentNode.appendChild(elem);
                }
            },
            initFlash: function (elem) {
                // console.log(elem);
                if (DONE.indexOf(elem) !== -1) {
                    return;
                }
                if (this.rewriteFlash(elem)) {
                    this.reloadFlash(elem);
                    DONE.push(elem);
                }
            },
            rewriteFlash: function (elem) {
                var atrs = ['data', 'src'];
                var players = CONSTANTS.PLAYERS;
                var needReload = false;
                UTIL.forEach(atrs, function (atr) {
                    UTIL.forEach(players, function (player) {
                        if (elem[atr] && player.find.test(elem[atr])) {
                            elem[atr] = elem[atr].replace(player.find, player.replace);
                            needReload = true;
                        }
                    });
                });
                return needReload;
            },
            forEach: function (arr, callback) {
                if (this.isArrayLike(arr)) {
                    if (Array.prototype.forEach) {
                        Array.prototype.forEach.call(arr, callback);
                    } else {
                        var i = 0;
                        for (i = 0; i < arr.length; ++i) {
                            callback.call(arr[i], arr[i]);
                        }
                    }
                }
            },
            isArrayLike: function (obj) {
                if (typeof obj !== 'object') {
                    return false;
                }
                var types = ['Array', 'NodeList', 'HTMLCollection'];
                var i = 0;
                for (i = 0; i < types.length; ++i) {
                    if (Object.prototype.toString.call(obj).indexOf(types[i]) !== -1) {
                        return true;
                    }
                }
                return false;
            }
        };
        function init() {
            function onDOMNodeInsertedHandler(e) {
                var target = e.target;
                if (target.nodeType === 1 && /OBJECT|EMBED|IFRAME/ig.test(target.nodeName)) {
                    UTIL.initFlash(target);
                }
            }
            function onAnimationStartHandler(e) {
                if (e.animationName === 'nodeInserted') {
                    var target = e.target;
                    // console.log(target);
                    if (target.nodeType === 1 && /OBJECT|EMBED|IFRAME/ig.test(target.nodeName)) {
                        UTIL.initFlash(target);
                    }
                }
            }
            UTIL.addCss(CONSTANTS.NODEINSERTED_HACK);
            /*Firefox*/
            document.body.addEventListener('animationstart', onAnimationStartHandler, false);
            /*/Firefox*/
            /*Chrome*/
            document.body.addEventListener('webkitAnimationEnd', onAnimationStartHandler, false);
            /*/Chrome*/
            /*Opera 12+*/
            document.body.addEventListener('oAnimationStart', onAnimationStartHandler, false);
            /*/Opera 12+*/
            /*IE, but I never tested this*/
            document.body.addEventListener('msAnimationStart', onAnimationStartHandler, false);
            /*/IE, but I never tested this*/
            if (/Opera/.test(navigator.userAgent) && !(/Version\/12/.test(navigator.userAgent))) {
                /*Old fashion, slower maybe*/
                document.body.addEventListener('DOMNodeInserted', onDOMNodeInsertedHandler, false);
                var matches = document.body.querySelectorAll(CONSTANTS.PLAYER_DOM);
                UTIL.forEach(matches, function (elem) {
                    UTIL.initFlash(elem);
                });
            }
        }
        function tips() {
            s=document.getElementById('ab_pip');
            s.innerHTML = "";
        }
        function share(elem) {
            var pairs = CONSTANTS.SHARES;
            UTIL.forEach(pairs, function (item) {
                elem.value = elem.value.replace(item.find, item.replace);
            });
        }
        var CONTROLLER = [
            {
                host: '.',
                fn: function () {
                    init();
                }
            },
            {
                host: 'youku.com',
                fn: function () {
                    // UTIL.addCss(CONSTANTS.STYLE);
                    tips();

                    var matches = document.body.querySelectorAll(CONSTANTS.SHARE_DOM);
                    UTIL.forEach(matches, share);


                    var youkuPlayer = document.body.querySelector('.playBox');
                    var notWide = !document.body.querySelector('.playBox_thx');
                    if (youkuPlayer && notWide) {
                        youkuPlayer.className += ' playBox_thx';
                    }
                }
            },
            {
                host: 'tudou.com',
                fn: function () {
                    // UTIL.addCss(CONSTANTS.STYLE);
                    //tips();
                    var tudouPlayer = document.body.querySelector('#playerObject');
                    var normalDom = document.querySelector('.normal');
                    if (tudouPlayer && normalDom) {
                        normalDom.className = normalDom.className.replace('normal','widescreen');
                    }
                    var g = (typeof unsafeWindow !== 'undefined') ? unsafeWindow : window;
                    var TUI_copyToClip = g.TUI.copyToClip;
                    g.TUI.copyToClip = function () {
                        var matches = document.body.querySelectorAll(CONSTANTS.SHARE_DOM);
                        UTIL.forEach(matches, share);
                        TUI_copyToClip.apply(g.TUI, arguments);
                    };
                }
            }
        ];
        var host = location.host;
        function PROC(item) {
            if (host.indexOf(item.host) !== -1) {
                item.fn();
                return;
            }
        }
        UTIL.forEach(CONTROLLER, PROC);
    })();</script></body></html>