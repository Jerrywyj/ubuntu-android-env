<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>vim 常用快捷键 二 - wangkangluo1 - 博客园</title>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/blog/css/common.css?id=20121228"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="http://common.cnblogs.com/Skins/coffee/style.css?id=20121228"/>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/blog/css/common2.css"/>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/css/shStyle.css"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/wangkangluo1/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/wangkangluo1/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/wangkangluo1/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">
var currentBlogApp = 'wangkangluo1';
</script>
<script src="http://common.cnblogs.com/blog/script/common.js?id=20121228" type="text/javascript"></script> 
<script src="http://common.cnblogs.com/script/json2.js" type="text/javascript"></script>
<script type="text/javascript" src="http://common.cnblogs.com/script/syntaxHighlighter.js"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js" language="javascript" type="text/javascript">
    </script>
 <script src="http://files.cnblogs.com/wangkangluo1/page.js" language="javascript" type="text/javascript">
    </script>

<!--PageBeginHtml Block End-->

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/wangkangluo1/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/wangkangluo1/">wangkangluo1 </a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<!--done-->
			<ul id="navList">
				<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
				<li><a id="MyLinks1_IngLink" class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
				<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/wangkangluo1/">首页</a></li>
				<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://www.cnblogs.com/wangkangluo1/admin/EditPosts.aspx?opt=1">新随笔</a></li>
				<li><a id="MyLinks1_ContactLink" accesskey="9" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/wangkangluo1">联系</a></li>
				<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://www.cnblogs.com/wangkangluo1/admin/EditPosts.aspx">管理</a></li>
				<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/wangkangluo1/rss">订阅</a>
				<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/wangkangluo1/rss"><img src="/Skins/Custom/images/rss.gif" alt="订阅" /></a></li>
			</ul>


			<div class="blogStats">
				
				
				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		
	
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/wangkangluo1/archive/2012/04/12/2444952.html">vim 常用快捷键 二</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><h3>键盘移动 (Move)</h3>
<p>一切都从键盘的移动<br /><span style="color: #ff0000;">k&nbsp;-&gt; 上 up</span><br /><span style="color: #ff0000;">j&nbsp;-&gt; 下 down</span><br /><span style="color: #ff0000;">h&nbsp;-&gt; 左 left</span><br /><span style="color: #ff0000;">l&nbsp;-&gt; 右 right</span><br /><span style="color: #ff0000;">z&nbsp;-&gt; 重画屏幕，当前光标变成屏幕的第一行 (redraw current line at top of window)</span><br /><span style="color: #ff0000;">CTRL-f&nbsp;-&gt; 跳到下一页 (page down)</span><br /><span style="color: #ff0000;">CTRL-b&nbsp;-&gt; 跳到上一页 (page up)</span></p>
<h3>跳跃指令 (jumps)</h3>
<p>跳跃指令类似于游览器中的&lt;前进&gt;&lt;后退&gt;按钮<br /><span style="color: #ff0000;">CTRL-]&nbsp;-&gt; 跟着link/tag转入 (follow link/tag)</span><br /><span style="color: #ff0000;">CTRL-o&nbsp;-&gt; 回到上一次的jump (go back)</span><br /><span style="color: #ff0000;">CTRL-i&nbsp;-&gt; 跳回下一个 (go forward)</span><br /><span style="color: #ff0000;">:ju&nbsp;-&gt; 显示所有的可以跳跃的地方 (print jump list)</span></p>
<h3>重做/回复</h3>
<p><span style="color: #ff0000;">u&nbsp;-&gt; undo</span><br /><span style="color: #ff0000;">CTRL-r&nbsp;-&gt; redo</span><br /><span style="color: #ff0000;">vim的undo是树结构的，你可以回到这个结构中的任何地方</span><br /><span style="color: #ff0000;">:undo 2&nbsp;-&gt; undo 到结构的2层 (undo to tree 2)</span><br /><span style="color: #ff0000;">:undolist&nbsp;-&gt; 显示所有的undo列表 (show undo list)</span><br /><span style="color: #ff0000;">:earlier&nbsp;10s -&gt; undo到10秒前的编辑 (undo to 10 seconds ago)</span><br /><span style="color: #ff0000;">:earlier&nbsp;10h -&gt; undo到10小时前的编辑 (back to 10 hours ago)</span><br /><span style="color: #ff0000;">:earlier&nbsp;1m -&gt; undo到1分钟前 (back to 1 minutes ago)</span><br />下面是undo的tree结构的解释<br />&hellip;&hellip;&hellip;..one<br />&hellip;&hellip;&hellip;&hellip;. |<br />&hellip;&hellip;..change 1<br />&hellip;&hellip;&hellip;&hellip;. |<br />&hellip;&hellip;&hellip;one too<br />&hellip;&hellip;&hellip;. /&hellip;&hellip;..\<br />&hellip;..change 2 &hellip;&hellip;. change 3<br />&hellip;&hellip;&hellip;&hellip; | &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip; |<br />&hellip;&hellip;.one two &hellip;&hellip;&hellip;. me too<br />&hellip;&hellip;&hellip;.. |<br />&hellip;.. change 4<br />&hellip;&hellip;&hellip;..|<br />&hellip;&hellip; not two</p>
<h3>视觉模式 (visual)</h3>
<p><span>v&nbsp;</span>-&gt; 进入视觉模式<br />在视觉模式内可以作block的编辑<br /><span>CTRL-v</span>&nbsp;-&gt; visual block</p>
<h3>打印 (print)</h3>
<p><span>:hardcopy</span>&nbsp;-&gt; 打印vim中的内容 (print text)<br />混合视觉模式 (visual) 可以选择打印的区域<br />没试过是否可以直接给值打印（应该可以）例如 :1,15hardcopy 打印前15行</p>
<h3>将文件写成网页格式 (html)</h3>
<p><span>:source $VIMRUNTIME/syntax/2html.vim</span>&nbsp;-&gt; change current open file to html</p>
<h3>格式 (format)</h3>
<p>dos/windows跟unix/linux对于文件的结束是不一样的。vim可以直接设定/更改格式<br />用纸令<span>:set fileformats=unix,dos</span>&nbsp;可以改变文件的格式 (change format)</p>
<p><span>:set ff=unix&nbsp;</span>-&gt; 设定文件成unix格式 (set file in unix format)<br /><span>:set ff=dos</span>&nbsp;-&gt; 设定文件成dos格式 (set file in dos format)<br /><span>:set ff?&nbsp;</span>-&gt; 检查当前文件格式 (check the format of current file)<br />如果改变格式，直接:w存档就会存成新的格式了。</p>
<h3>加密 (encryption)</h3>
<p>vim可以给文件加密码<br /><span>vim -x&nbsp;</span>文件名 (filename) -&gt; 输入2次密码，保存后文件每次都会要密码才能进入 (encrypt the file with password)<br />vim 处理加密文件的时候，并不会作密码验证，也就是说，当你打开文件的时候，vim不管你输入的密码是否正确，直接用密码对本文进行解密。如果密码错误，你看 到的就会是乱码，而不会提醒你密码错误（这样增加了安全性，没有地方可以得知密码是否正确）当然了，如果用一个够快的机器作穷举破解，vim还是可以揭开 的</p>
<h3>vim 语法显示 (syntax)</h3>
<p><span>:syntax enable&nbsp;</span>-&gt; 打开语法的颜色显示 (turn on syntax color)<br /><span>:syntax clear&nbsp;</span>-&gt; 关闭语法颜色 (remove syntax color)<br /><span>:syntax off</span>&nbsp;-&gt; 完全关闭全部语法功能 (turn off syntax)<br /><span>:syntax manual</span>&nbsp;-&gt; 手动设定语法 (set the syntax manual, when need syntax use :set syntax=ON)</p>
<h3>输入特殊字符 (special character)</h3>
<p><span>CTRL-v&nbsp;</span>编码就可以了<br />例如&nbsp;<span>CTRL-v 273 -&gt;</span>&nbsp;&yuml; 得到 &yuml;</p>
<h3>二进 制文件 (binary file)</h3>
<p>vim可以显示，编辑2进位文件</p>
<p><span>vim -b datafile&nbsp;</span><br /><span>:set display=uhex</span>&nbsp;-&gt; 这样会以uhex显示。用来显示一些无法显示的字符（控制字符之类）(display in uhex play non-display char)</p>
<p><span>:%!xxd</span>&nbsp;-&gt; 更改当前文件显示为2进位 (change display to binary)<br /><span>:%!xxd -r&nbsp;</span>-&gt; 更改二进位为text格式 (convert back to text)</p>
<h3>自动完成 (auto-completion)</h3>
<p>vim本身有自动完成功能（这里不是说ctag，而是vim内建的）<br /><span>CTRL-p</span>&nbsp;-&gt; 向后搜索自动完成 (search backward)<br /><span>CTRL-n</span>&nbsp;-&gt; 向前搜索自动完成 (search forward)<br /><span>CTRL-x+CTRL-o</span>&nbsp;-&gt; 代码自动补全 (code completion)</p>
<h3>自动备份 (backup)</h3>
<p>vim可以帮你自动备份文件（储存的时候，之前的文件备份出来）<br /><span>:set backup</span>&nbsp;-&gt; 开启备份，内建设定备份文件的名字是 源文件名加一个 &lsquo;~&rsquo; (enable backup default filename+~)<br /><span>:set backupext=.bak</span>&nbsp;-&gt; 设定备份文件名为源文件名.bak (change backup as filename.bak)</p>
<p>自动备份有个问题就是，如果你多次储存一个文件，那么这个你的备份文件会被不断覆盖，你只能有最后一次存文件之前的那个备份。没关系，vim还提 供了patchmode，这个会把你第一次的原始文件备份下来，不会改动<br /><span>:set patchmode=.orig</span>&nbsp;-&gt; 保存原始文件为 文件名.orig (keep orignal file as filename.orig)</p>
<h3>开启，保存与退出 （save &amp; exit)</h3>
<p><span>:w&nbsp;</span>-&gt; 保存文件 (write file)<br /><span>:w!</span>&nbsp;-&gt; 强制保存 (force write)<br /><span>:q&nbsp;</span>-&gt; 退出文件 (exit file without save)<br /><span>:q!&nbsp;</span>-&gt; 强制退出 (force quite without save)<br /><span>:e filename</span>&nbsp;-&gt; 打开一个文件名为filename的文件 (open file to edit)<br /><span>:e! filename</span>&nbsp;-&gt; 强制打开一个文件，所有未保存的东西会丢失 (force open, drop dirty buffer)<br /><span>:saveas filename</span>&nbsp;-&gt; 另存为 filename (save file as filename)</p>
<h3>编辑指令 (edit)</h3>
<p><span>a</span>&nbsp;-&gt; 在光表后插入 (append after cursor)<br /><span>A</span>&nbsp;-&gt; 在一行的结尾插入 (append at end of the line)<br /><span>i</span>&nbsp;-&gt; 在光标前插入 (insert before cursor)<br /><span>I</span>&nbsp;-&gt; 在第一个非空白字符前插入 (insert before first non-blank)<br /><span>o</span>&nbsp;-&gt; 光标下面插入一个新行 (open line below)<br /><span>O</span>&nbsp;-&gt; 光标上面插入一个新行 (open line above)<br /><span>x</span>&nbsp;-&gt; 删除光标下（或者之后）的东西 (delete under and after cursor)<br />例如x就是删除当前光标下，<span>3x</span>就是删除光标下+光标后2位字符<br /><span>X</span>&nbsp;-&gt; 删除光标前的字符 (delete before cursor)<br /><span>d&nbsp;</span>-&gt; 删除 (delete)<br />可以用dd删除一行，或者3dw删除3个词等等<br /><span>J</span>&nbsp;-&gt; 将下一行提到这行来 (join line)<br /><span>r</span>&nbsp;-&gt; 替换个字符 (replace characters)<br /><span>R</span>&nbsp;-&gt; 替换多个字符 (replace mode &ndash; continue replace)<br /><span>gr</span>&nbsp;-&gt; 不影响格局布置的替换 (replace without affecting layout)<br /><span>c</span>&nbsp;-&gt; 跟d键一样，但是删除后进入输入模式 (same as &ldquo;d&rdquo; but after delete, in insert mode)<br /><span>S</span>&nbsp;-&gt; 删除一行(好像dd一样）但是删除后进入输入模式 (same as &ldquo;dd&rdquo; but after delete, in insert mode)<br /><span>s</span>&nbsp;-&gt; 删除字符，跟(d)一样，但是删除后进入输入模式 (same as &ldquo;d&rdquo; but after delete, in insert mode)<br /><span>s4s</span>&nbsp;会删除4个字符，进入输入模式 (delete 4 char and put in insert mode)<br /><span>~</span>&nbsp;-&gt; 更改大小写，大变小，小变大 (change case upper-&gt; lower or lower-&gt;upper)<br /><span>gu</span>&nbsp;-&gt; 变成小写 (change to lower case)<br />例如&nbsp;<span>guG</span>&nbsp;会把光标当前到文件结尾全部变成小写 (change lower case all the way to the end)<br /><span>gU</span>&nbsp;-&gt; 变成大写 (change to upper case)<br />例如<span>&nbsp;gUG</span>&nbsp;会把光标当前到文件结尾全部变成大写 (change upper case all the way to the end)</p>
<h3>复制与粘贴 (copy &amp; paste)</h3>
<p><span>y&nbsp;</span>-&gt; 复制 (yank line)<br /><span>yy&nbsp;</span>-&gt; 复制当前行 (yank current line)<br /><span>&ldquo;{a-zA-Z}y</span>&nbsp;-&gt; 把信息复制到某个寄存中 (yank the link into register {a-zA-Z})<br />例如我用&nbsp;<span>&ldquo;ayy</span>&nbsp;那么在寄存a，就复制了一行，然后我再用<span>&ldquo;byw</span>复制一个词在寄存b<br />粘贴的时候，我可以就可以选择贴a里面的东西还是b里面的，这个就好像是多个复制版一样<br /><span>&ldquo;*y</span>&nbsp;-&gt; 这个是把信息复制进系统的复制版（可以在其他程序中贴出来）(yank to OS buffer)<br /><span>p&nbsp;</span>-&gt; 当前光标下粘贴 (paste below)<br /><span>P</span>&nbsp;-&gt; 当前光标上粘贴 (paste above)<br /><span>&ldquo;{a-zA-Z}p&nbsp;</span>-&gt; 将某个寄存的内容贴出来 (paste from register)<br />例如<span>&ldquo;ap</span>那么就在当前光标下贴出我之前在寄存a中 的内容。<span>&ldquo;bP</span>就在当前光标上贴出我之前寄存b的内容<br /><span>&ldquo;*p&nbsp;</span>-&gt; 从系统的剪贴板中读取信息贴入vim (paste from OS buffer to vim)<br /><span>reg</span>&nbsp;-&gt; 显示所有寄存中的内容 (list all registers)</p>
<h3>书签 (Mark)</h3>
<p>书签是vim中非常强大的一个功能，书签分为文件书签跟全局书签。文件书签是你标记文件中的不同位置，然后可以在文件内快速跳转到你想要的位置。 而全局书签是标记不同文件中的位置。也就是说你可以在不同的文件中快速跳转</p>
<p><span>m{a-zA-Z}</span>&nbsp;-&gt; 保存书签，小写的是文件书签，可以用(a-z）中的任何字母标记。大写的是全局 书签，用大写的(A-Z)中任意字母标记。(mark position as bookmark. when lower, only stay in file. when upper, stay in global)<br /><span>&lsquo;{a-zA-Z}</span>&nbsp;-&gt; 跳转到某个书签。如果是全局书签，则会开启被书签标记的文件跳转至标记的行 (go to mark. in file {a-z} or global {A-Z}. in global, it will open the file)<br /><span>&rsquo;0&nbsp;</span>-&gt; 跳转入现在编辑的文件中上次退出的位置 (go to last exit in file)<br /><span>&rdquo;&nbsp;</span>-&gt; 跳转如最后一次跳转的位置 (go to last jump -&gt; go back to last jump)<br /><span>&lsquo;&rdquo;&nbsp;</span>-&gt; 跳转至最后一次编辑的位置 (go to last edit)<br /><span>g&rsquo;{mark}</span>&nbsp;-&gt; 跳转到书签 (jump to {mark})<br /><span>:delm{marks}</span>&nbsp;-&gt; 删除一个书签 (delete a mark) 例如<span>:delma</span>那么就删除了书签a<br /><span>:delm!</span>&nbsp;-&gt; 删除全部书签 (delete all marks)<br /><span>:marks</span>&nbsp;-&gt; 显示系统全部书签 (show all bookmarks)</p>
<h3>标志 (tag)</h3>
<p><span>:ta</span>&nbsp;-&gt; 跳转入标志 (jump to tag)<br /><span>:ts</span>&nbsp;-&gt; 显示匹配标志，并且跳转入某个标志 (list matching tags and select one to jump)<br /><span>:tags</span>&nbsp;-&gt; 显示所有标志 (print tag list)</p>
<h3>运行外部命令 (using an external program)</h3>
<p><span>:!</span>&nbsp;-&gt; 直接运行shell中的一个外部命令 (call any external program)<br /><span>:!make</span>&nbsp;-&gt; 就直接在当前目录下运行make指令了 (run make on current path)<br /><span>:r !ls</span>&nbsp;-&gt; 读取外部运行的命令的输入，写入当然vim中。这里读取ls的输出 (read the output of ls and append the result to file)<br /><span>:3r !date -u</span>&nbsp;-&gt; 将外部命令date -u的结果输入在vim的第三行中 (read the date -u, and append result to 3rd line of file)</p>
<p><span>:w !wc&nbsp;</span>-&gt; 将vim的内容交给外部指令来处理。这里让wc来处理vim的内容 (send vim&rsquo;s file to external command. this will send the current file to wc command)<br />vim对于常用指令有一些内建，例如wc (算字数）(vim has some buildin functions, such like wc)<br /><span>g CTRL-G&nbsp;</span>-&gt; 计算当前编译的文件的字数等信息 (word count on current buffer)<br /><span>!!date&nbsp;</span>-&gt; 插入当前时间 (insert current date)</p>
<h3>多个文件的编辑 (edit multifiles)</h3>
<p>vim可以编辑多个文件，例如<br /><span>vim a.txt b.txt c.txt&nbsp;</span>就打开了3个文件</p>
<p><span>:next</span>&nbsp;-&gt; 编辑下一个文件 (next file in buffer)<br /><span>:next! -</span>&gt; 强制编辑下个文件，这里指如果更改了第一个文件 (force to next file in buffer if current buffer changed)<br /><span>:wnext -</span>&gt; 保存文件，编辑下一个 (save the file and goto next)<br /><span>:args&nbsp;</span>-&gt; 查找目前正在编辑的文件名 (find out which buffer is editing now)<br /><span>:previous</span>&nbsp;-&gt; 编辑上个文件 (previous buffer)<br /><span>:previous!&nbsp;</span>-&gt; 强制编辑上个文件，同 :next! (force to previous buffer, same as :next!)<br /><span>:last&nbsp;</span>-&gt; 编辑最后一个文件 (last buffer)<br /><span>:first&nbsp;</span>-&gt; 编辑最前面的文件 (first buffer)<br /><span>:set autowrite</span>&nbsp;-&gt; 设定自动保存，当你编辑下一个文件的时候，目前正在编辑的文件如果改动，将会自动保存 (automatic write the buffer when you switch to next buffer)<br /><span>:set noautowrite</span>&nbsp;-&gt; 关闭自动保存 (turn autowrite off)<br /><span>:hide e abc.txt&nbsp;</span>-&gt; 隐藏当前文件，打开一个新文件 abc.txt进行编辑 (hide the current buffer and edit abc.txt)<br /><span>:buffers&nbsp;</span>-&gt; 显示所有vim中的文件 (display all buffers)<br /><span>:buffer2&nbsp;</span>-&gt; 编辑文件中的第二个 (edit buffer 2)</p>
<p>vim中很多东西可以用简称来写，就不用打字那么麻烦了，例如 :edit=:e, :next=:n 这样.</p>
<h3>分屏 (split)</h3>
<p>vim提供了分屏功能（跟screen里面的split一样）<br /><span>:split&nbsp;</span>-&gt; 将屏幕分成2个 (split screen)<br /><span>:split abc.txt</span>&nbsp;-&gt; 将屏幕分成两个，第二个新的屏幕中显示abc.txt的内容 (split the windows, on new window, display abc.txt)<br /><span>:vsplit</span>&nbsp;-&gt; 竖着分屏 (split vertically)<br /><span>:{d}split&nbsp;</span>-&gt; 设定分屏的行数，例如我要一个屏幕只有20行，就可以下:20split (split the windows with {d} line. 20split: open new windows with 3 lines)<br /><span>:new&nbsp;</span>-&gt; 分屏并且在新屏中建立一个空白文件 (split windows with a new blank file)<br /><span>CTRL-w+j/k/h/l&nbsp;</span>-&gt; 利用CTRL加w加上j/k/h/l在不同的屏内切换 (switch, move between split screens)<br /><span>CTRL-w+ -/+&nbsp;</span>-&gt; 增减分屏的大小 (change split size)<br /><span>CTRL-w+t</span>&nbsp;-&gt; 移动到最顶端的那个屏 (move to the top windows)<br /><span>CTRL-w+b&nbsp;</span>-&gt; 移动到最下面的屏 (move to bottom window)<br /><span>:close&nbsp;</span>-&gt; 关闭一个分出来的屏 (close splited screen)<br /><span>: only</span>&nbsp;-&gt; 只显示光标当前屏 ，其他将会关闭(only display current active screen, close all others )<br /><span>:qall&nbsp;</span>-&gt; 退出所有屏 (quite all windows)<br /><span>:wall&nbsp;</span>-&gt; 保存所有屏 （write to all windows）<br /><span>:wqall&nbsp;</span>-&gt; 保存并退出所有屏 (write and quite all windows)<br /><span>:qall!</span>&nbsp;-&gt; 退出所有屏，不保存任何变动 (quite all windows without save)<br />开启文件的时候，利用 -o选项，就可以直接开启多个文件在分屏中 (with -o option from command line, it will open files and display in split mode)<br /><span>vim -o a.txt b.txt</span></p>
<p>今天有人说不会看diff，其实vim也可以用来看diff，这个也是属于分屏的部分，这里也写一下。</p>
<p><span>vimdiff a.txt b.txt</span>&nbsp;如果直接给 -d选项是一样的 vim -d a.txt b.txt<br /><span>:diffsplit abc.txt</span>&nbsp;如果你现在已经开启了一个文件，想vim帮你区分你的文件跟abc.txt有什么区别，可以在vim中用diffsplit的方式打开第二个文件，这个时 候vim会用split的方式开启第二个文件，并且通过颜色，fold来显示两个文件的区别<br />这样vim就会用颜色帮你区分开2个文件的区别。如果文件比较大（源码）重复的部分会帮你折叠起来（折叠后面会说）<br />现在来说patch<br /><span>:diffpatch filename</span>&nbsp;通过<span>:diffpatch</span>&nbsp;你的patch的文件名，就可以以当前文件加上你的patch来显示。vim会split一个新的屏，显示patch后的信息并且用颜色标明区别。<br />如果不喜欢上下对比，喜欢左右（比较符合视觉）可以在前面加vert，例如：<br /><span>:vert diffsplit abc.txt</span><br /><span>:vert diffpatch abc.txt</span><br />看完diff，用<span>: only</span>回到原本编辑的文件，觉 得diff的讨厌颜色还是在哪里，只要用:diffoff关闭就好了。<br />还有个常用的diff中的就是<span>&nbsp;:diffu</span>&nbsp;这个是<span>&nbsp;:diffupdate</span>&nbsp;的简写，更新用</p>
<h3>TAB</h3>
<p>除了split之外， vim还可以用 tab</p>
<p><span>:tab split filename</span>&nbsp;-&gt; 这个就用tab的方式来显示多个文件 (use tab to display buffers)<br /><span>gt&nbsp;</span>-&gt; 到下一个tab (go to next tab)<br /><span>gT</span>&nbsp;-&gt; 到上一个tab (go to previous tab)<br />vim大多数东西都是可一给数字来执行的，tab也是一样<br /><span>0gt</span>&nbsp;-&gt;跳到第一个tab (switch to 1st tab)<br /><span>5gt</span>&nbsp;-&gt; 跳到第五个tab (switch to 5th tab)</p>
<address>关闭所有的tab可以使用qall的指令。另外让vim在启动的时候就自动用tabnew的方式来开启多个文件，可以用alias</address><address>linux: 添加 alias vim=&rsquo;vim -p&rsquo; 到 ~/.bashrc</address><address>windows: 自己写个vim.bat的文件，然后放在path中，文件内容：</address><address>@echo off</address><address>vim -p %*</address><address>当需要更改多个tab中的文件的时候，可以用&nbsp;<span>:tabdo</span>&nbsp;这个指令 这个就相当于 loop 到你的所有的 tab 中然后运行指令。</address><address>例如有5个文件都在tab里面，需要更改一个变量名称：abc 到 def， 就可以用 :tabdo %s/abc/def/g 这样所有的5个tab里面的abc就都变成def了</address><address>&nbsp;</address>
<h3>折叠 (folding)</h3>
<p>vim的折叠功能。。。我记得应该是6版出来的时候才推出的吧。这个对于写程序的人来说，非常有用。<br /><span>zfap</span>&nbsp;-&gt; 按照段落折叠 (fold by paragraph)<br /><span>zo</span>&nbsp;-&gt; 打开一个折叠 (open fold)<br /><span>zc</span>&nbsp;-&gt; 关闭一个折叠 (close fold)<br /><span>zf</span>&nbsp;-&gt; 创建折叠 (create fold) 这个可以用v视觉模式，可以直接给行数等等<br /><span>zr</span>&nbsp;-&gt; 打开一定数量的折叠，例如3rz (reduce the folding by number like 3zr)<br /><span>zm</span>&nbsp;-&gt; 折叠一定数量（之前你定义好的折叠） (fold by number)<br /><span>zR</span>&nbsp;-&gt; 打开所有的折叠 (open all fold)<br /><span>zM</span>&nbsp;-&gt; 关闭所有的摺叠 (close all fold)<br /><span>zn</span>&nbsp;-&gt; 关闭折叠功能 (disable fold)<br /><span>zN&nbsp;</span>-&gt; 开启折叠功能 (enable fold)<br /><span>zO</span>&nbsp;-&gt; 将光标下所有折叠打开 (open all folds at the cursor line)<br /><span>zC&nbsp;</span>-&gt; 将光标下所有折叠关闭 (close all fold at cursor line)<br /><span>zd&nbsp;</span>-&gt; 将光标下的折叠删除，这里不是删除内容，只是删除折叠标记 (delete fold at cursor line)<br /><span>zD</span>&nbsp;-&gt; 将光标下所有折叠删除 (delete all folds at the cursor line)<br />按照tab来折叠，python最好用的 (ford by indent, very useful for python)<br /><span>:set foldmethod=indent</span>&nbsp;-&gt; 设定后用<span>zm</span>&nbsp;跟&nbsp;<span>zr</span>&nbsp;就可以的开关关闭了 (use zm zr)</p>
<h3>保存 (save view)</h3>
<p>对于vim来说，如果你设定了折叠，但是退出文件，不管是否保持文件，折叠部分会自动消失的。这样来说非常不方便。所以vim给你方法去保存折 叠，标签，书签等等记录。最厉害的是，vim对于每个文件可以保存最多10个view，也就是说你可以对同一个文件有10种不同的标记方法，根据你的需 要，这些东西都会保存下来。<br /><span>:mkview</span>&nbsp;-&gt; 保存记录 (save setting)<br /><span>:loadview</span>&nbsp;-&gt; 读取记录 (load setting)<br /><span>:mkview 2</span>&nbsp;-&gt; 保存记录在寄存2 （save view to register 2)<br /><span>:loadview 3</span>&nbsp;-&gt; 从寄存3中读取记录 (load view from register 3)</p>
<h3>常用指令 (commands)</h3>
<p><span>:set ic</span>&nbsp;-&gt;设定为搜索时不区分大小 写 (search case insensitive)<br /><span>:set noic</span>&nbsp;-&gt;搜索时区分大小写。 vim内定是这个(case sensitive )<br /><span>&amp;</span>&nbsp;-&gt; 重复上次的&rdquo;<span>:s</span>&rdquo; (repeat previous &ldquo;:s&rdquo;)<br /><span>.</span>&nbsp;-&gt; 重复上次的指令 (repeat last command)<br /><span>K</span>&nbsp;-&gt; 在man中搜索当前光标下的词 (search man page under cursor)<br /><span>{0-9}K</span>&nbsp;-&gt; 查找当前光标下man中的章节，例如5K就是同等于man 5 (search section of man. 5K search for man 5)<br /><span>:history</span>&nbsp;-&gt; 查看命令历史记录 (see command line history)<br /><span>q:</span>&nbsp;-&gt; 打开vim指令窗口 (open vim command windows)<br /><span>:e</span>&nbsp;-&gt; 打开一个文件，vim可以开启http/ftp/scp的文件 (open file. also works with http/ftp/scp)<br /><span>:e http://www.google.com/index.html&nbsp;</span>-&gt; 这里就在vim中打开google的index.html (open google&rsquo;s index.html)<br /><span>:cd</span>&nbsp;-&gt; 更换vim中的目录 (change current directory in vim)<br /><span>:pwd</span>&nbsp;-&gt; 显示vim当前目录 (display pwd in vim)<br /><span>gf&nbsp;</span>-&gt; 打开文件。例如你在vim中有一行写了#include 那么在<span>abc.h</span>上面按<span>gf</span>，vim就会把abc.h这个文件打开 (look for file. if you have a file with #include , then the cursor is on abc.h press gf, it will open the file abc.h in vim )</p>
<h3>记录指令 (record)</h3>
<p><span>q{a-z}</span>&nbsp;-&gt; 在某个寄存中记录指令 (record typed char into register)<br /><span>q{A-Z}</span>&nbsp;-&gt; 将指令插入之前的寄存器 (append typed char into register{a-z})<br /><span>q&nbsp;</span>-&gt; 结束记录 (stop recording)<br /><span>@{a-z}</span>&nbsp;-&gt; 执行寄存中的指令 (execute recording)<br /><span>@@</span>&nbsp;-&gt; 重复上次的指令 (repeat previours :@{a-z})<br />还是给个例子来说明比较容易明白<br />我现在在一个文件中下<span>qa</span>指令,然后输入<span>itest</span>然后<span>ESC</span>然后<span>q</span><br />这里qa就是说把我的指令记录进a寄存，itest实际是分2步，i 是插入 (insert) 写入的文字是 text 然后用ESC退回指令模式q结束记录。这样我就把itest记录再一个寄存了。<br />下面我执行<span>@a</span>那么就会自动插入test这个词。<span>@@</span>就重复前一个动作，所以还是等于<span>@a</span></p>
<h3>搜索 (search)</h3>
<p>vim超级强大的一个功能就是搜索跟替换了。要是熟悉正表达(regular expressions)这个搜索跟后面的替换将会是无敌利器（支持RE的编辑器不多吧）</p>
<p>从简单的说起<br /><span>#</span>&nbsp;-&gt; 光标下反向搜索关键词 (search the word under cursor backward)<br /><span>*</span>&nbsp;-&gt; 光标下正向搜索关键词 (search the word under cursor forward)<br /><span>/</span>&nbsp;-&gt; 向下搜索 (search forward)<br /><span>?</span>&nbsp;-&gt; 向上搜索 (search back)<br />这里可以用&nbsp;<span>/abc&nbsp;</span>或&nbsp;<span>?abc</span>的方式向上，向下搜索abc<br /><span>%</span>&nbsp;-&gt; 查找下一个结束，例如在&rdquo;(&ldquo;下查找下一个&rdquo;)&rdquo;，可以找&rdquo;()&rdquo;, &ldquo;[]&rdquo; 还有shell中常用的 if, else这些 (find next brace, bracket, comment or #if/#else/#endif)</p>
<p>下面直接用几个例子说话<br /><span>/a*</span>&nbsp;-&gt; 这个会搜到 a aa aaa<br /><span>/\(ab\)*</span>&nbsp;-&gt; 这个会搜到 ab abab ababab<br /><span>/ab\+&nbsp;</span>-&gt; 这个会搜到 ab abb abbb<br /><span>/folers\=&nbsp;</span>-&gt; 这个会搜到 folder folders<br /><span>/ab\{3,5}</span>&nbsp;-&gt; 这个会搜到 abbb abbbb abbbbb<br /><span>/ab\{-1,3}</span>&nbsp;-&gt; 这个会在abbb中搜到ab (will match ab in abbb)<br /><span>/a.\{-}b</span>&nbsp;-&gt; 这个会在axbxb中搜到axb (match &lsquo;axb&rsquo; in &lsquo;axbxb&rsquo;)<br /><span>/a.*b</span>&nbsp;-&gt; 会搜索到任何a开头后面有b的 (match a*b any)<br /><span>/foo\|bar&nbsp;</span>-&gt; 搜索foo或者bar，就是同时搜索2个词 (match &lsquo;foo&rsquo; or &lsquo;bar&rsquo;)<br /><span>/one\|two\|three</span>&nbsp;-&gt; 搜索3个词 (match &lsquo;one&rsquo;, &lsquo;two&rsquo; or &lsquo;three&rsquo;)<br /><span>/\(foo\|bar\)\+</span>&nbsp;-&gt; 搜索foo, foobar, foofoo, barfoobar等等 (match &lsquo;foo&rsquo;, &lsquo;foobar&rsquo;, &lsquo;foofoo&rsquo;, &lsquo;barfoobar&rsquo; &hellip; )<br /><span>/end\(if\|while\|for\)</span>&nbsp;-&gt; 搜索endif, endwhile endfor (match &lsquo;endif&rsquo;, &lsquo;endwhile&rsquo;, &lsquo;endfor&rsquo;)<br /><span>/forever\&amp;&hellip;</span>&nbsp;-&gt; 这个会在forever中搜索到&rdquo;for&rdquo;但是不会在fortuin中搜索到&rdquo;for&rdquo; 因为我们这里给了&amp;&hellip;的限制 (match &lsquo;for&rsquo; in &lsquo;forever&rsquo; will not match &lsquo;fortuin&rsquo;)</p>
<p>特殊字符前面加<span>^</span>就可以 (for special character, user &ldquo;^&rdquo; at the start of range)<br /><span>/&rdquo;[^"]*&rdquo;</span><br />这里解释一下<br />&rdquo; 双引号先引起来 (double quote)<br />[^"] 任何不是双引号的东西(any character that is not a double quote)<br />* 所有的其他 (as many as possible)<br />&rdquo; 结束最前面的引号 (double quote close)<br />上面那个会搜到<span>&ldquo;foo&rdquo; &ldquo;3!x&rdquo;</span>这样的包括引号 (match &ldquo;foo&rdquo; -&gt; and &ldquo;3!x&rdquo; include double quote)</p>
<p>更多例子，例如搜索车牌规则，假设车牌是 &ldquo;<span>1MGU103</span>&rdquo; 也就是说，第一个是数字，3个大写字幕，3个数字的格式。那么我们可以直接搜索所有符合这个规则的字符<br />(A sample license plate number is &ldquo;1MGU103&Prime;. It has one digit, three upper case<br />letters and three digits. Directly putting this into a search pattern)<br />这个应该很好懂，我们搜索<br />\数字\大写字母\大写字母\大写字母\数字\数字\数字</p>
<p><span>/\d\u\u\u\d\d\d</span></p>
<p>另外一个方法，是直接定义几位数字（不然要是30位，难道打30个\u去？）<br />(specify there are three digits and letters with a count)</p>
<p><span>/\d\u\{3}\d\{3}</span></p>
<p>也可以用范围来搜索 (Using [] ranges)<br /><span>/[0-9][A-Z]\{3}[0-9]\{3}</span></p>
<p>用到范围搜索，列出一些范围(range)<br />这个没什么好说了，看一下就都明白了，要全部记住。。。用的多了就记住了，用的少了就忘记了。每次看帮助，呵呵</p>
<p><strong>/[a-z]<br />/[0123456789abcdef] = /[0-9a-f]<br />\e<br />\t<br />\r<br />\b</strong><br />简写 (item matches equivalent)</p>
<p><strong>\d digit [0-9]<br />\D non-digit [^0-9]<br />\x hex digit [0-9a-fA-F]<br />\X non-hex digit [^0-9a-fA-F]<br />\s white space [ ] ( and )<br />\S non-white characters [^ ] (not and )<br />\l lowercase alpha [a-z]<br />\L non-lowercase alpha [^a-z]<br />\u uppercase alpha [A-Z]<br />\U non-uppercase alpha [^A-Z]</strong></p>
<p><span>:help /[]</span>&nbsp;&ndash;&gt; 特殊的定义的，可以在vim中用用help来看 (everything about special)<br /><span>:help /\s&nbsp;</span>&ndash;&gt; 普通的也可以直接看一下 (everything about normal)</p>
<h3>替换 (string substitute) &ndash; RX</h3>
<p>替换其实跟搜索是一样的。只不过替换是2个值，一个是你搜索的东西，一个是搜索到之后要替换的 string substitute (use rx)</p>
<p><span>%s/abc/def/</span>&nbsp;-&gt; 替换abc到def (substitute abc to def)<br /><span>%s/abc/def/c&nbsp;</span>-&gt; 替换abc到def，会每次都问你确定(substitute on all text with confirmation (y,n,a,q,l))<br /><span>1,5s/abc/def/g</span>&nbsp;-&gt; 只替换第一行到第15行之间的abc到def (substitute abc to def only between line 1 to 5)<br /><span>54s/abc/def/</span>&nbsp;-&gt; 只替换第54行的abc到def (only substitute abc to def on line 54)</p>
<p>结合上面的搜索正表达式，这个替换功能。。。就十分只强大。linux中很多地方都是用正表达来做事请的，所以学会了受益无穷。</p>
<h3>全局 (global)</h3>
<p>这个不知道怎么翻译，反正vim是叫做global，可以对搜索到的东西执行一些vim的命令。我也是2-3个星期前因为读log中一些特殊的东 西，才学会用的。 (find the match pater and execute a command)</p>
<p>global具体自行方法是&nbsp;<span>g/pattern/command</span><br /><span>:g/abc/p</span>&nbsp;-&gt; 查找并显示出只有abc的行 (only print line with &ldquo;abc&rdquo; )<br /><span>:g/abc/d</span>&nbsp;-&gt; 删除所有有abc的行 (delete all line with &ldquo;abc&rdquo;)<br /><span>:v/abc/d&nbsp;</span>-&gt; 这个会把凡是不是行里没有abc的都删掉 (delete all line without &ldquo;abc&rdquo;)</p>
<h3>信息过滤 (filter)</h3>
<p>vim又一强大功能</p>
<p><span>!</span>&nbsp;-&gt; 用!就是告诉vim，执行过滤流程 (tell vim to performing a filter operation)<br /><span>!5G</span>&nbsp;-&gt; 从光标下向下5行执行过滤程序 (tell vim to start filter under cursor and go down 5 lines)</p>
<p>正式指令开始，这里用sort来做例子：<br /><span>!5Gsort&nbsp;</span>-&gt; 从光标下开始执行sort，一共执行5行，就是说我只要sort5行而已 (this will sort the text from cursor line down to 5 lines)<br /><span>!Gsort -k3</span>&nbsp;-&gt; 可以直接代sort的参数，我要sort文字中的第三段 (sort to the end of file by column 3)<br /><span>!!</span>&nbsp;-&gt; 值过滤当前的这行 (filter the current line)</p>
<p>如果觉得!这样的方法5G这样的方法用起来别扭（我是这么觉得），可以用标准的命令模式来做<br />!其实就是个<span>:.,</span>而已 （to type the command）<br /><span>:.,start,end!sort</span>&nbsp;这里定义:.,起始行，结束行!运行指令<br /><span>:.,$!sort&nbsp;</span>-&gt; 从当前这行一直执行至文件结束 (sort from current line to end)<br /><span>:.0,$!sort&nbsp;</span>-&gt; 从文件的开始第一个行一直执行到文件结束 (sort from start of file to end)<br /><span>:.10,15!sort&nbsp;</span>-&gt; 只在文件的第10行到第15行之间执行 (sort between line 10 to 15)</p></div><div id="MySignature"></div>
<script type="text/javascript">
var isLogined = false;
var cb_blogId = 88869;
var cb_entryId = 2444952;
var cb_blogApp = currentBlogApp;
var cb_blogUserGuid = "7cb51306-5b1a-e011-ac81-842b2b196315";
var cb_entryCreatedDate = '2012/4/12 23:05:00';
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
</script>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>
<script type="text/javascript">
    //SyntaxHighlighter.config.strings.expandSource = '<span><img src="http://static.cnblogs.com/images/expand-code.gif" alt="" class="expand-code-icon"/>View Code</span>';
    $(function () {             
        fixPostBodyFormat();
        loadAdUnderPost();
        loadBlogSignature();
        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);        
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);        
    });
</script>
		</div>
		<div class = "postDesc">posted @ <span id="post-date">2012-04-12 23:05</span> <a href='http://www.cnblogs.com/wangkangluo1/'>wangkangluo1</a> 阅读(3192) 评论(<span id="post-comment-count">0</span>)  <a href ="http://www.cnblogs.com/wangkangluo1/admin/EditPosts.aspx?postid=2444952" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2444952);return false;">收藏</a></div>
	</div>
	<img src ="http://www.cnblogs.com/wangkangluo1/aggbug/2444952.html?type=1&amp;webview=1" width="1" height="1" alt=""/>
	
</div><!--end: topics 文章、评论容器-->
<div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.loadComments();</script>
<div id="comment_form" class="commentform">
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>

<script type="text/javascript">
    if (typeof commentManager === 'undefined') {
        commentManager = new blogCommentManager();
    }
    commentManager.loadCommentForm();   
</script>

<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder"></div>
<div id="HistoryToday" class="c_ad_block"></div>
</div>





	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
			<div id="calendar"><div id="blog-calendar" style="displya:none"></div></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2013 wangkangluo1
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<!--PageEndHtml Block Begin-->
<script src="http://s20.cnzz.com/stat.php?id=3980738&web_id=3980738&show=pic" language="JavaScript">
    </script>

<!--PageEndHtml Block End-->
<script type="text/javascript" src="http://common.cnblogs.com/script/google-analytics.js"></script>
</body>
</html>
