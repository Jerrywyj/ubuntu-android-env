<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0057)http://blog.csdn.net/luoshengyang/article/details/6567257 -->
<html xmlns="http://www.w3.org/1999/xhtml" version="g42dymwpi--nx">
<body>




<div id="container">



        
<div id="body">
<div id="main">
<div class="main">
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="./Android硬件抽象层（HAL）概要介绍和学习计划_files/Android硬件抽象层（HAL）概要介绍和学习计划.htm">
        Android硬件抽象层（HAL）概要介绍和学习计划
        </a></span>
    </h3>
</div>

        
    



    
<div id="article_content" class="article_content">
<p>&nbsp;&nbsp; &nbsp; &nbsp;Android的硬件抽象层，简单来说，就是对Linux内核驱动程序的封装，向上提供接口，屏蔽低层的实现细节。也就是说，把对硬件的支持分成了两层，一层放在用户空间（User Space），一层放在内核空间（Kernel Space），其中，硬件抽象层运行在用户空间，而Linux内核驱动程序运行在内核空间。为什么要这样安排呢？把硬件抽象层和内核驱动整合在一起放在内核空间不可行吗？从技术实现的角度来看，是可以的，然而从商业的角度来看，把对硬件的支持逻辑都放在内核空间，可能会损害厂家的利益。我们知道，Linux内核源代码版权遵循GNU License，而Android源代码版权遵循Apache License，前者在发布产品时，必须公布源代码，而后者无须发布源代码。如果把对硬件支持的所有代码都放在Linux驱动层，那就意味着发布时要公开驱动程序的源代码，而公开源代码就意味着把硬件的相关参数和实现都公开了，在手机市场竞争激烈的今天，这对厂家来说，损害是非常大的。因此，Android才会想到把对硬件的支持分成硬件抽象层和内核驱动层，内核驱动层只提供简单的访问硬件逻辑，例如读写硬件寄存器的通道，至于从硬件中读到了什么值或者写了什么值到硬件中的逻辑，都放在硬件抽象层中去了，这样就可以把商业秘密隐藏起来了。也正是由于这个分层的原因，Android被踢出了Linux内核主线代码树中。大家想想，Android放在内核空间的驱动程序对硬件的支持是不完整的，把Linux内核移植到别的机器上去时，由于缺乏硬件抽象层的支持，硬件就完全不能用了，这也是为什么说Android是开放系统而不是开源系统的原因。</p><p>&nbsp;&nbsp; &nbsp; 撇开这些争论，学习Android硬件抽象层，对理解整个Android整个系统，都是极其有用的，因为它从下到上涉及到了Android系统的硬件驱动层、硬件抽象层、运行时库和应用程序框架层等等，下面这个图阐述了硬件抽象层在Android系统中的位置，以及它和其它层的关系：</p><p style="text-align:center"><img src="./Android硬件抽象层（HAL）概要介绍和学习计划_files/0_1308977488PkP8.gif" alt=""></p><p>&nbsp;&nbsp; &nbsp; 在学习Android硬件抽象层的过程中，我们将会学习如何在内核空间编写硬件驱动程序、如何在硬件抽象层中添加接口支持访问硬件、如何在系统启动时提供硬件访问服务以及 如何编写JNI使得可以通过Java接口来访问硬件，而作为中间的一个小插曲，我们还将学习一下如何在Android系统中添加一个C可执行程序来访问硬件驱动程序。由于这是一个系统的学习过程，笔者将分成六篇文章来描述每一个学习过程，包括:</p><p>&nbsp;&nbsp; &nbsp; 一. <a href="http://blog.csdn.net/luoshengyang/article/details/6568411">在Android内核源代码工程中编写硬件驱动程序</a>。</p><p>&nbsp;&nbsp; &nbsp; 二.&nbsp;<a href="http://blog.csdn.net/luoshengyang/article/details/6571210">在Android系统中增加C可执行程序来访问硬件驱动程序</a>。</p><p>&nbsp;&nbsp; &nbsp; 三. <a href="http://blog.csdn.net/luoshengyang/article/details/6573809">在Android硬件抽象层增加接口模块访问硬件驱动程序</a>。</p><p>&nbsp;&nbsp; &nbsp; 四. <a href="http://blog.csdn.net/luoshengyang/article/details/6575988">在Android系统中编写JNI方法在应用程序框架层提供Java接口访问硬件</a>。</p><p>&nbsp;&nbsp; &nbsp; 五. <a href="http://blog.csdn.net/luoshengyang/article/details/6578352">在Android系统的应用程序框架层增加硬件服务接口</a>。</p><p>&nbsp;&nbsp; &nbsp; 六. <a href="http://blog.csdn.net/luoshengyang/article/details/6580267">在Android系统中编写APP通过应用程序框架层访问硬件服务</a>。</p><p>&nbsp;&nbsp; &nbsp; 学习完这六篇文章，相信大家对Android系统就会有一个更深刻的认识了，敬请关注。</p>
</div>





            

</div>



















</div>
</div>




</div>










</div>

<script>(function main() {
        var CONSTANTS = {
            PLAYER_DOM: 'object[data],embed[src],iframe[src]',
            PLAYERS: [
                {
                    find: /http:\/\/static\.youku\.com\/.*q?(player|loader)(_taobao)?\.swf/,
                    replace: 'http://player.opengg.me/loader.swf'
                },
                {
                    find: /http:\/\/js\.tudouui\.com\/.*\/TudouVideoPlayer_Homer_.*.swf/,
                    replace: 'http://player.opengg.me/TudouVideoPlayer_Homer_237.swf'
                },
                {
                    find: /http:\/\/player\.youku\.com\/player\.php\//,
                    replace: 'http://player.opengg.me/player.php/'
                },
                {
                    find: /http:\/\/www.tudou.com\/(([a-z]|programs)\/.*)/,
                    replace: 'http://player.opengg.me/td.php/$1'
                }
            ],
            SHARE_DOM: '#panel_share input,input#copyInput.txt',
            SHARES: [
                {
                    find: /http:\/\/player\.youku\.com\/player\.php\//,
                    replace: 'http://player.opengg.me/player.php/'
                },
                {
                    find: /http:\/\/www.tudou.com\/(.*v\.swf)/,
                    replace: 'http://player.opengg.me/td.php/$1'
                }
            ],
            NODEINSERTED_HACK: '@-moz-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-webkit-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-o-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}embed,object{animation-duration:.001s;-ms-animation-duration:.001s;-moz-animation-duration:.001s;-webkit-animation-duration:.001s;-o-animation-duration:.001s;animation-name:nodeInserted;-ms-animation-name:nodeInserted;-moz-animation-name:nodeInserted;-webkit-animation-name:nodeInserted;-o-animation-name:nodeInserted;}',
            TOGGLE_BTN: '#toggleGoogle'
        };
        var DONE = [];
        var UTIL = {
            addCss: function (str) {
                var style = document.createElement('style');
                style.textContent = str;
                document.head.appendChild(style);
            },
            reloadFlash: function (elem) {
                var nextSibling = elem.nextSibling;
                var parentNode = elem.parentNode;
                parentNode.removeChild(elem);
                if (nextSibling) {
                    parentNode.insertBefore(elem, nextSibling);
                } else {
                    parentNode.appendChild(elem);
                }
            },
            initFlash: function (elem) {
                // console.log(elem);
                if (DONE.indexOf(elem) !== -1) {
                    return;
                }
                if (this.rewriteFlash(elem)) {
                    this.reloadFlash(elem);
                    DONE.push(elem);
                }
            },
            rewriteFlash: function (elem) {
                var atrs = ['data', 'src'];
                var players = CONSTANTS.PLAYERS;
                var needReload = false;
                UTIL.forEach(atrs, function (atr) {
                    UTIL.forEach(players, function (player) {
                        if (elem[atr] && player.find.test(elem[atr])) {
                            elem[atr] = elem[atr].replace(player.find, player.replace);
                            needReload = true;
                        }
                    });
                });
                return needReload;
            },
            forEach: function (arr, callback) {
                if (this.isArrayLike(arr)) {
                    if (Array.prototype.forEach) {
                        Array.prototype.forEach.call(arr, callback);
                    } else {
                        var i = 0;
                        for (i = 0; i < arr.length; ++i) {
                            callback.call(arr[i], arr[i]);
                        }
                    }
                }
            },
            isArrayLike: function (obj) {
                if (typeof obj !== 'object') {
                    return false;
                }
                var types = ['Array', 'NodeList', 'HTMLCollection'];
                var i = 0;
                for (i = 0; i < types.length; ++i) {
                    if (Object.prototype.toString.call(obj).indexOf(types[i]) !== -1) {
                        return true;
                    }
                }
                return false;
            }
        };
        function init() {
            function onDOMNodeInsertedHandler(e) {
                var target = e.target;
                if (target.nodeType === 1 && /OBJECT|EMBED|IFRAME/ig.test(target.nodeName)) {
                    UTIL.initFlash(target);
                }
            }
            function onAnimationStartHandler(e) {
                if (e.animationName === 'nodeInserted') {
                    var target = e.target;
                    // console.log(target);
                    if (target.nodeType === 1 && /OBJECT|EMBED|IFRAME/ig.test(target.nodeName)) {
                        UTIL.initFlash(target);
                    }
                }
            }
            UTIL.addCss(CONSTANTS.NODEINSERTED_HACK);
            /*Firefox*/
            document.body.addEventListener('animationstart', onAnimationStartHandler, false);
            /*/Firefox*/
            /*Chrome*/
            document.body.addEventListener('webkitAnimationEnd', onAnimationStartHandler, false);
            /*/Chrome*/
            /*Opera 12+*/
            document.body.addEventListener('oAnimationStart', onAnimationStartHandler, false);
            /*/Opera 12+*/
            /*IE, but I never tested this*/
            document.body.addEventListener('msAnimationStart', onAnimationStartHandler, false);
            /*/IE, but I never tested this*/
            if (/Opera/.test(navigator.userAgent) && !(/Version\/12/.test(navigator.userAgent))) {
                /*Old fashion, slower maybe*/
                document.body.addEventListener('DOMNodeInserted', onDOMNodeInsertedHandler, false);
                var matches = document.body.querySelectorAll(CONSTANTS.PLAYER_DOM);
                UTIL.forEach(matches, function (elem) {
                    UTIL.initFlash(elem);
                });
            }
        }
        function tips() {
            s=document.getElementById('ab_pip');
            s.innerHTML = "";
        }
        function share(elem) {
            var pairs = CONSTANTS.SHARES;
            UTIL.forEach(pairs, function (item) {
                elem.value = elem.value.replace(item.find, item.replace);
            });
        }
        var CONTROLLER = [
            {
                host: '.',
                fn: function () {
                    init();
                }
            },
            {
                host: 'youku.com',
                fn: function () {
                    // UTIL.addCss(CONSTANTS.STYLE);
                    tips();

                    var matches = document.body.querySelectorAll(CONSTANTS.SHARE_DOM);
                    UTIL.forEach(matches, share);


                    var youkuPlayer = document.body.querySelector('.playBox');
                    var notWide = !document.body.querySelector('.playBox_thx');
                    if (youkuPlayer && notWide) {
                        youkuPlayer.className += ' playBox_thx';
                    }
                }
            },
            {
                host: 'tudou.com',
                fn: function () {
                    // UTIL.addCss(CONSTANTS.STYLE);
                    //tips();
                    var tudouPlayer = document.body.querySelector('#playerObject');
                    var normalDom = document.querySelector('.normal');
                    if (tudouPlayer && normalDom) {
                        normalDom.className = normalDom.className.replace('normal','widescreen');
                    }
                    var g = (typeof unsafeWindow !== 'undefined') ? unsafeWindow : window;
                    var TUI_copyToClip = g.TUI.copyToClip;
                    g.TUI.copyToClip = function () {
                        var matches = document.body.querySelectorAll(CONSTANTS.SHARE_DOM);
                        UTIL.forEach(matches, share);
                        TUI_copyToClip.apply(g.TUI, arguments);
                    };
                }
            }
        ];
        var host = location.host;
        function PROC(item) {
            if (host.indexOf(item.host) !== -1) {
                item.fn();
                return;
            }
        }
        UTIL.forEach(CONTROLLER, PROC);
    })();</script></body></html>