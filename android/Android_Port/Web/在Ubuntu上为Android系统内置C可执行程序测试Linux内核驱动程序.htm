<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0057)http://blog.csdn.net/luoshengyang/article/details/6571210 -->
<html xmlns="http://www.w3.org/1999/xhtml" version="g42dymwpi--nx"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">








<link type="text/css" rel="stylesheet" href="./在Ubuntu上为Android系统内置C可执行程序测试Linux内核驱动程序_files/default.css">
<style>@-moz-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-webkit-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-o-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}embed,object{animation-duration:.001s;-ms-animation-duration:.001s;-moz-animation-duration:.001s;-webkit-animation-duration:.001s;-o-animation-duration:.001s;animation-name:nodeInserted;-ms-animation-name:nodeInserted;-moz-animation-name:nodeInserted;-webkit-animation-name:nodeInserted;-o-animation-name:nodeInserted;}</style></head>
<body>




<div id="container">



        
<div id="body">
<div id="main">
<div class="main">
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="./在Ubuntu上为Android系统内置C可执行程序测试Linux内核驱动程序_files/在Ubuntu上为Android系统内置C可执行程序测试Linux内核驱动程序.htm">
        在Ubuntu上为Android系统内置C可执行程序测试Linux内核驱动程序
        </a></span>
    </h3>
</div>

        
    



    
<div id="article_content" class="article_content">
<p>&nbsp;&nbsp; &nbsp; &nbsp;在前一篇文章中，我们介绍了如何在Ubuntu上为Android系统编写Linux内核驱动程序。在这个名为hello的Linux内核驱动程序中，创建三个不同的文件节点来供用户空间访问，分别是传统的设备文件/dev/hello、proc系统文件/proc/hello和devfs系统属性文件/sys/class/hello/hello/val。进一步，还通过cat命令来直接访问/proc/hello和/sys/class/hello/hello/val文件来，以验证驱动程序的正确性。在这一篇文章里，我们将通过自己编写的C可执行程序来访问设备文件/dev/hello。可能读者会觉得奇怪，怎么能在Android系统中用C语言来编写应用程序呢？Android系统上的应用程序不都是Java应用程序吗？其实是可以的，读者不妨用adb shell命令连上Android模拟器，在/system/bin目录下可以看到很多C可执行程序，如cat命令。今天，我们就来学习一下怎么在Android系统中添加用C语言编写的可执行程序吧。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;一. 参照<a href="http://blog.csdn.net/luoshengyang/article/details/6568411">在Ubuntu上为Android系统编写Linux内核驱动程序</a>一文，准备好Linux驱动程序。使用Android模拟器加载包含这个Linux驱动程序的内核文件，并且使用adb shell命令连接上模拟，验证在/dev目录中存在设备文件hello。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;二. 进入到Android源代码工程的external目录，创建hello目录:</p><p>&nbsp;&nbsp; &nbsp; &nbsp;<strong>USER-NAME@MACHINE-NAME:~/Android$ cd external</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;USER-NAME@MACHINE-NAME:~/Android/external$ mkdir hello</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;三. </strong>在hello目录中新建hello.c文件：</p><p></p><div class="dp-highlighter bg_cpp"><div class="bar"><div class="tools"><b>[cpp]</b> <a href="http://blog.csdn.net/luoshengyang/article/details/6571210#" class="ViewSource" title="view plain" onclick="dp.sh.Toolbar.Command(&#39;ViewSource&#39;,this);return false;">view plain</a><a href="http://blog.csdn.net/luoshengyang/article/details/6571210#" class="CopyToClipboard" title="copy" onclick="dp.sh.Toolbar.Command(&#39;CopyToClipboard&#39;,this);return false;">copy</a><a href="http://blog.csdn.net/luoshengyang/article/details/6571210#" class="PrintSource" title="print" onclick="dp.sh.Toolbar.Command(&#39;PrintSource&#39;,this);return false;">print</a><a href="http://blog.csdn.net/luoshengyang/article/details/6571210#" class="About" title="?" onclick="dp.sh.Toolbar.Command(&#39;About&#39;,this);return false;">?</a><div style="position: absolute; left: 510px; top: 876px; width: 18px; height: 18px; z-index: 99;"><embed id="ZeroClipboardMovie_1" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="18" height="18" name="ZeroClipboardMovie_1" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=1&amp;width=18&amp;height=18" wmode="transparent"></div></div></div><ol start="1" class="dp-cpp"><li class="alt"><span><span class="preprocessor">#include&nbsp;&lt;stdio.h&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="preprocessor">#include&nbsp;&lt;stdlib.h&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="preprocessor">#include&nbsp;&lt;fcntl.h&gt;</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span><span class="preprocessor">#define&nbsp;DEVICE_NAME&nbsp;"/dev/hello"</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span><span class="datatypes">int</span><span>&nbsp;main(</span><span class="datatypes">int</span><span>&nbsp;argc,&nbsp;</span><span class="datatypes">char</span><span>**&nbsp;argv)&nbsp;&nbsp;</span></span></li><li class=""><span>{&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes">int</span><span>&nbsp;fd&nbsp;=&nbsp;-1;&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes">int</span><span>&nbsp;val&nbsp;=&nbsp;0;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;fd&nbsp;=&nbsp;open(DEVICE_NAME,&nbsp;O_RDWR);&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>(fd&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string">"Failed&nbsp;to&nbsp;open&nbsp;device&nbsp;%s.\n"</span><span>,&nbsp;DEVICE_NAME);&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;-1;&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string">"Read&nbsp;original&nbsp;value:\n"</span><span>);&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;read(fd,&nbsp;&amp;val,&nbsp;<span class="keyword">sizeof</span><span>(val));&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string">"%d.\n\n"</span><span>,&nbsp;val);&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;val&nbsp;=&nbsp;5;&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string">"Write&nbsp;value&nbsp;%d&nbsp;to&nbsp;%s.\n\n"</span><span>,&nbsp;val,&nbsp;DEVICE_NAME);&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(fd,&nbsp;&amp;val,&nbsp;<span class="keyword">sizeof</span><span>(val));&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string">"Read&nbsp;the&nbsp;value&nbsp;again:\n"</span><span>);&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(fd,&nbsp;&amp;val,&nbsp;<span class="keyword">sizeof</span><span>(val));&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string">"%d.\n\n"</span><span>,&nbsp;val);&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;&nbsp;&nbsp;close(fd);&nbsp;&nbsp;</span></li><li class=""><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;0;&nbsp;&nbsp;</span></span></li><li class="alt"><span>}&nbsp;&nbsp;</span></li></ol></div><pre name="code" class="cpp" style="display: none;">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;
#define DEVICE_NAME "/dev/hello"
int main(int argc, char** argv)
{
	int fd = -1;
	int val = 0;
	fd = open(DEVICE_NAME, O_RDWR);
	if(fd == -1) {
		printf("Failed to open device %s.\n", DEVICE_NAME);
		return -1;
	}
	
	printf("Read original value:\n");
	read(fd, &amp;val, sizeof(val));
	printf("%d.\n\n", val);
	val = 5;
	printf("Write value %d to %s.\n\n", val, DEVICE_NAME);
        write(fd, &amp;val, sizeof(val));
	
	printf("Read the value again:\n");
        read(fd, &amp;val, sizeof(val));
        printf("%d.\n\n", val);
	close(fd);
	return 0;
}</pre><p></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>这个程序的作用中，打开/dev/hello文件，然后先读出/dev/hello文件中的值，接着写入值5到/dev/hello中去，最后再次读出/dev/hello文件中的值，看看是否是我们刚才写入的值5。从/dev/hello文件读写的值实际上就是我们虚拟的硬件的寄存器val的值。</p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>四. 在hello目录中新建Android.mk文件：</p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;LOCAL_PATH := $(call my-dir)</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;include $(CLEAR_VARS)</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;LOCAL_MODULE_TAGS := optional</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;LOCAL_MODULE := hello</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;LOCAL_SRC_FILES := $(call all-subdir-c-files)</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;include $(BUILD_EXECUTABLE)</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>注意，<span>BUILD_EXECUTABLE表示我们要编译的是可执行程序。</span><strong>&nbsp;</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>五. 参照<a href="http://blog.csdn.net/luoshengyang/article/details/6566662">如何单独编译Android源代码中的模块</a>一文，使用mmm命令进行编译：</p><p>&nbsp;&nbsp; &nbsp; &nbsp;<strong>USER-NAME@MACHINE-NAME:~/Android$ mmm ./external/hello</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>编译成功后，就可以在out/target/product/gerneric/system/bin目录下，看到可执行文件hello了。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;六. 重新打包Android系统文件system.img：</p><p>&nbsp;&nbsp; &nbsp; &nbsp;<strong>USER-NAME@MACHINE-NAME:~/Android$ make snod</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>这样，重新打包后的system.img文件就包含刚才编译好的hello可执行文件了。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;七. 运行模拟器，使用/system/bin/hello可执行程序来访问Linux内核驱动程序：</p><p>&nbsp;&nbsp; &nbsp; &nbsp;<strong>USER-NAME@MACHINE-NAME:~/Android$ emulator -kernel ./kernel/common/arch/arm/boot/zImage &amp;</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;USER-NAME@MACHINE-NAME:~/Android$ adb shell</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;root@android:/ # cd system/bin</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;root@android:/system/bin # ./hello</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;Read the original value:</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;0.</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;Write value 5 to /dev/hello.</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;Read the value again:</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;5.</strong></p><p><strong>&nbsp;&nbsp; &nbsp; &nbsp;</strong>看到这个结果，就说我们编写的C可执行程序可以访问我们编写的Linux内核驱动程序了。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;介绍完了如何使用C语言编写的可执行程序来访问我们的Linux内核驱动程序，读者可能会问，能不能在Android的Application Frameworks提供Java接口来访问Linux内核驱动程序呢？可以的，接下来的几篇文章中，我们将介绍如何在Android的Application Frameworks中，增加Java接口来访问Linux内核驱动程序，敬请期待。</p>
</div>





            

</div>



















</div>
</div>




</div>










</div>

</body></html>