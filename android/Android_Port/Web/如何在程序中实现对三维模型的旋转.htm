<!DOCTYPE html>
<!-- saved from url=(0045)http://www.roboby.com/3d-metrix-transfer.html -->
<html dir="ltr" lang="zh-CN" version="g42dymwpi--nx">

    <body class="single single-post postid-2704 single-format-standard">

    
    <div id="ws-main">

        

        <div id="ws-wrapper" class="container-fluid"><div class="row-fluid">

    
    <div class="span9">
        <div class="well">

            
            
                <article class="ws-article  " id="post-2704">

    
    <header class="entry-header">

            
    
    <h1 class="entry-title">
                    如何在程序中实现对三维模型的旋转            </h1>

    

    
</header>
    
    <div class="entry-content clearfix  ">

        <div>
<h3>&nbsp;<strong>如何在程序中实现对三维模型的旋转——探讨旋转过程中，程序所需要的变量与及计算原理</strong></h3>
</div>
<div>
<p><strong>作者：KT</strong><span style="font-size: medium;"><strong><br>
</strong></span></p>
<p>在程序中，通过鼠标旋转3D模型最常用的方法应该就是——轨迹球<span style="font-size: medium;">&nbsp;</span></p>
<p><span style="font-size: medium;">参考了国外的博客文章和同济大学高等数学下册之后，终于能初步明白这种轨迹球的计算原理，</span></p>
<p><span style="font-size: medium;">我看了一下高数，把一些公式的推导过程也列出来了。</span></p>
<p><span style="font-size: medium;">本日志的文字，图片以及推导过程，都是我利用软件和参考书籍完成的，尽量力求正确了</span></p>
<p><span style="font-size: medium;">如果发现错误存在，请联系本人</span></p>
<p><span style="font-size: medium;">阅读可能有一定的难度，毕竟最近才开始写技术类文章。</span></p>
<p><span style="font-size: medium;">模拟效果示意图——用两张图片模拟一下效果，本日志旨在理论上进行分析</span></p>
<p><strong>如何在程序中实现对三维模型的旋转</strong></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771422.jpg"><img class="alignnone size-full wp-image-2705" title="3366440721460771422" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771422.jpg" alt="" width="434" height="282"></a></p>
<p><span style="font-size: medium;"><span>第一 ：</span><span>&nbsp;简单介绍</span></span></p>
<p><span style="font-size: medium;">我们在显示器所看到的屏幕是二维平面（只有X和Y），因此鼠标的坐标也就有X和Y坐标，那么将屏幕看成是一个平面，在这个平面后面，虚构一个球体（轨迹球，3D模型就位于轨迹球之内），然后屏幕平面捕捉鼠标的坐标，然后将鼠标的坐标投影到球面上！（下图效果示意图）</span></p>
<p><span style="font-size: medium;">——轨迹球旋转带动3D模型旋转?可以这样理解，不过具体解释，后面会有！<br>
</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771423.jpg"><img class="alignnone size-full wp-image-2706" title="3366440721460771423" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771423.jpg" alt="" width="640" height="300"></a></p>
<p><span style="font-size: medium;">图中鼠标点击在屏幕平面时，必须将其投影至背后虚构的轨迹球球面上！</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771424.jpg"><img class="alignnone size-full wp-image-2707" title="3366440721460771424" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771424.jpg" alt="" width="527" height="388"></a></p>
<div>第二：坐标转换</div>
<div><span><br>
</span></div>
<p><span style="color: #99cc00;"><span style="color: #99cc00;"><span style="font-size: medium;">屏幕平面是二维坐标，而虚构的球体是三维坐标，很明显是不能将鼠标的坐标（X,Y）直接投影成三维坐标（X，Y，Z）</span></span></span>&nbsp;<a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771425.jpg"><img class="alignnone size-full wp-image-2708" title="3366440721460771425" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771425.jpg" alt="" width="646" height="317"></a></p>
<p><span style="font-size: medium;">因此这个时候需要进行坐标维数的转换！</span></p>
<p><span style="font-size: medium;">——二维坐标能够转换成三维坐标吗？答案是可以，虽然二维坐标只有（x,y），但是将二维坐标通过合理变化后，再利用x坐标值和y坐标值就能计算出z坐标值，后面我会写上详细的公式推导过程。</span></p>
<p><span style="font-size: medium;">下图就是转化示意图，强调一点，这个是前视图的投影图来的，两个正方形都是屏幕平面的正面！</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771426.jpg"><img class="alignnone size-full wp-image-2709" title="3366440721460771426" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771426.jpg" alt="" width="643" height="376"></a></p>
<p><span style="font-size: medium;">&nbsp;</span><span style="font-size: medium; color: #99cc00;">好，现在鼠标点击了屏幕平面，那么就必须利用一定的变化公式将这个点转变为三维坐标点！——即计算圆形中X和Y的值</span></p>
<p><span style="font-size: medium;">注意三维图中的1和-1是相对数，代表1个单位，不是具体的值，因此三维图中的X和Y是相对值，即百分比！</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771427.jpg"><img class="alignnone size-full wp-image-2710" title="3366440721460771427" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771427.jpg" alt="" width="643" height="376"></a></p>
<p><span style="font-size: medium;">Px、Py分别是鼠标的X坐标和Y坐标，这个在程序中是可以直接捕获得知数据的！</span></p>
<p><span style="font-size: medium;">公式如下：</span></p>
<p><span style="font-size: medium;">&nbsp;<a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771428.jpg"><img class="alignnone size-full wp-image-2711" title="3366440721460771428" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771428.jpg" alt="" width="348" height="71"></a></span></p>
<p><span style="font-size: medium; color: #99cc00;">解释：因为三维图的中心点 (0,0) 在二维图中是（width/2,height/2），</span></p>
<div><span style="font-size: medium;">三维图中，中心点（0,0）到上下左右边的距离为</span>width/2,height/2，而且到上下左右四边的标记距离都是1个单位！</div>
<div><span style="font-size: medium;"><span style="font-size: medium;">即width/2就是三维图中X轴的1个单位，height/2就是Y轴的1个单位</span></span>&nbsp;<p></p>
<p>px-width/2 就是该点在三维图中距离竖轴的距离，然后将该值除以width/2就能得出这段距离占1个单位的比例！——即 X 值！</p>
<p>&nbsp;</p>
<p><span style="font-size: medium;">那么Y的公式就是：</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771429.jpg"><img class="alignnone size-full wp-image-2712" title="3366440721460771429" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771429.jpg" alt="" width="332" height="79"></a></p>
<p><strong>这样是错的！错的！</strong></p>
<p><span style="font-size: medium;">为什么，我们观察下，二维图中的Y轴，这个这里取的是Y的负半轴！所以Py应该是负值，</span></p>
<p><span style="font-size: medium;">但是在三维图中，我们看到投影的点的坐标（x，y）是在[1,1]的正半轴区间内，y的值肯定是正数，所以要将上面计算出来的Y值取相反数！</span></p>
<p><span style="font-size: medium;">正确的公式是：</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771430.jpg"><img class="alignnone size-full wp-image-2713" title="3366440721460771430" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771430.jpg" alt="" width="419" height="73"></a></p>
<p><span style="font-size: medium;">&nbsp;一开始我也没有想明白，结果算错了，不过事后发现这里的推导还是很简单</span></p>
<p><span style="font-size: medium;">如果大家还是不明白这一点的话，那么可以这样理解，首先利用</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771429.jpg"><img title="3366440721460771429" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771429.jpg" alt="" width="332" height="79"></a></p>
<p>计算出来的y必定是负数，因为Py只能为负（二维坐标中，取的是Y的负半轴） ，好那么这样计算出来的投影点坐标应该是x为正，y为负，在[1，-1]区间内，那么这个点很明显与实际的投影点是关于中心横轴对称的，如图所示</p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771431.jpg"><img class="alignnone size-full wp-image-2714" title="3366440721460771431" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771431.jpg" alt="" width="306" height="337"></a></p>
<p>那么计算错误的投影点Y 与 正确投影点的 Y 就应该是关于中心横轴对称的，互为相反数，因此对错误的Y取相反数就就能取得正确点的Y值，这样理解起来应该没问题了！</p>
<p><span style="font-size: medium;">好了，现在我们已经拿到了投影点的X值和Y值了，那么正如前面所言，通过X和Y计算Z值！</span></p>
<p><span style="font-size: medium;">在球体中 有一公式：</span></p>
<p><span style="font-size: medium;"><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771432.jpg"><img class="alignnone size-full wp-image-2715" title="3366440721460771432" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771432.jpg" alt="" width="296" height="85"></a>&nbsp;</span></p>
<p><span style="font-size: medium;">&nbsp;其中r是球体半径</span></p>
<p><span style="font-size: medium;">公式推导：</span></p>
<p><span style="font-size: medium;">首先需要预习一下向量的基础知识——翻起了高等数学 – -！</span></p>
<p><span style="font-size: medium;"><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771433.jpg"><img class="alignnone size-full wp-image-2716" title="3366440721460771433" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771433.jpg" alt="" width="233" height="219"></a>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></p>
<p><span style="font-size: medium;">&nbsp;&nbsp;&nbsp;&nbsp;向量a ， 向量 b ， 向量 c</span></p>
<p><span style="font-size: medium;">&nbsp;&nbsp;&nbsp;&nbsp;a+b=c &nbsp;这个向量公式，大家应该都记得吧</span></p>
<p><span style="font-size: medium;">那么开始进入球体公式推导</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771434.jpg"><img class="alignnone size-full wp-image-2717" title="3366440721460771434" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771434.jpg" alt="" width="409" height="408"></a></p>
<p><span style="font-size: medium;">首先 a+b=c &nbsp;, c+e=f &nbsp;f 就是球面半径的向量 &nbsp;</span>&nbsp;<span style="font-size: medium;">那么就是 f=c+e=a+b+e &nbsp;求出向量的模的话，就是&nbsp;</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771435.jpg"><img class="alignnone size-full wp-image-2718" title="3366440721460771435" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771435.jpg" alt="" width="397" height="57"></a></p>
<p><span style="font-size: medium;">&nbsp;其实 a的模就是x坐标值，b的模就是y坐标值，e就是z坐标值！</span></p>
<p><span style="font-size: medium;">如果还是不懂话 ，直接用勾股定理吧 （x，y，z轴都是互相垂直的！）</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771438.jpg"><img class="alignnone size-full wp-image-2719" title="3366440721460771438" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771438.jpg" alt="" width="208" height="89"></a></p>
<p><span style="font-size: medium;">好了，</span>公式<span style="font-size: medium;"><br>
</span></p>
<div><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771432.jpg"><img title="3366440721460771432" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771432.jpg" alt="" width="296" height="85"></a></div>
<div>&nbsp;得证了，那么</div>
<p><span style="font-size: medium;">Z坐标值计算公式：</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771439.jpg"><img class="alignnone size-full wp-image-2720" title="3366440721460771439" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771439.jpg" alt="" width="299" height="72"></a></p>
<p><span style="font-size: medium;">&nbsp;因为球体半径r=1 所以，最终公式为</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771440.jpg"><img class="alignnone size-full wp-image-2721" title="3366440721460771440" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771440.jpg" alt="" width="283" height="77"></a></p>
<p><span style="font-size: medium;">好啦，二维坐标转为三维坐标的计算完成， 得到了在轨迹球面上的投影点坐标（x,y,z）！</span></p>
<p><span style="font-size: medium;">第三：点与点之间的旋转</span></p>
<div><span style="font-size: medium;"><br>
</span></div>
<div><span style="font-size: medium;">旋转示意图</span></div>
<div>
<p>&nbsp;<a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771441.jpg"><img class="alignnone size-full wp-image-2722" title="3366440721460771441" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771441.jpg" alt="" width="299" height="297"></a></p>
<p><span style="font-size: medium;">示意图说明：鼠标投影点从v1处从移动到v2处，旋转轴的概念就等同于地球的地轴——这样说应该能明白了吧</span></p>
<p><span style="font-size: medium;">如果要实现轨迹球旋转，就必须获得v1，v2，θ和旋转轴！</span></p>
<p>v1，v2可以用第二步中的坐标转换得到，</p>
<p>那么这里主要是计算出&nbsp;θ和旋转轴</p>
<p><span style="font-size: medium;">这里也是需要一些背景知识，其实大家都学过，还是向量</span></p>
<p><span style="font-size: medium;">我借用书本上的例子来说几点——两向量的数量积！ &nbsp;两向量的向量积！</span></p>
<p>书本例子：——已经懂的可以跳过</p>
<p><strong>同济大学高等数学第六版下册P13</strong></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771442.jpg"><img class="alignnone size-full wp-image-2723" title="3366440721460771442" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771442.jpg" alt="" width="470" height="268"></a></p>
<p><span style="font-size: large;">&nbsp;设一物体在恒力<strong>F</strong>作用下沿直线从点<strong>M1</strong>移动到点<strong>M2</strong>，以S表示位移量<strong>M1M2</strong>，那么F所作的功的计算：</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771443.jpg"><img class="alignnone size-full wp-image-2724" title="3366440721460771443" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771443.jpg" alt="" width="295" height="58"></a></p>
<p>F看成是a向量</p>
<p>s看成是b向量 那么就有</p>
<p><strong><span style="font-size: xx-large;">a*b=|a| |b| cos（θ）</span></strong></p>
<p><span style="font-size: medium;">所以得到</span></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771444.jpg"><img class="alignnone size-full wp-image-2725" title="3366440721460771444" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771444.jpg" alt="" width="321" height="99"></a></p>
<p>&nbsp;</p>
<p>好，这样我们就可以利用这个公式在轨迹图中计算θ值了</p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/33664407214607714411.jpg"><img class="alignnone size-full wp-image-2726" title="3366440721460771441" src="./如何在程序中实现对三维模型的旋转_files/33664407214607714411.jpg" alt="" width="299" height="297"></a></p>
<p><a href="./如何在程序中实现对三维模型的旋转_files/3366440721460771445.jpg"><img class="alignnone size-full wp-image-2727" title="3366440721460771445" src="./如何在程序中实现对三维模型的旋转_files/3366440721460771445.jpg" alt="" width="381" height="113"></a></p>
<p>θ求出来了，那么旋转轴呢！</p>
<p><span style="font-size: medium;">其实旋转轴&nbsp;</span></p>
<p><strong><span style="font-size: xx-large;">Axis=v1 * v2&nbsp;</span></strong></p>
<p><span style="font-size: medium;">因为对于向量a，向量b，向量c，</span></p>
<p><span style="font-size: medium;">若c=a x b ，那么c就是必须与a，b都垂直的！</span></p>
<p><span style="font-size: medium;">很明显旋转轴Axis是与v1和v2垂直的！满足于c=a x b！</span></p>
<p><span style="font-size: medium;">所以Axis=v1 * v2&nbsp;</span></p>
<p><span style="font-size: medium;">关于这点 具体解释 请见</span><span style="font-size: x-large;"><strong>同济大学高等数学第六版下册P17</strong></span></p>
<p><strong><br>
</strong></p>
<p><span style="font-size: large;"><strong>好，回答之前的问题</strong></span></p>
<p><span style="font-size: large;"><strong>问：是轨迹球旋转带动3D模型旋转？</strong></span></p>
<p><span style="font-size: large;"><strong>答：我现在的观点是，轨迹球是虚构存在的一个球，为了能够让程序在计算过程中获得一个球体曲面而虚构出来的立体图形，它的作用不是实现旋转，是为了将我们在程序（显示器屏幕平面）所点击的鼠标坐标转化为一个在球面上的坐标，我们看到的程序是一个平面，但是我们已经通过这个虚构的轨迹球将我们的操作球立体化了，那就相当于我们是在球面上操作着鼠标！然后计算出旋转所需数据，传递给3D模型，使其发生旋转变化！轨迹球就是一个为了满足计算而提供曲面的虚构立体图形！</strong></span><span style="font-size: x-large;"><strong><br>
</strong></span></p>
<p><span style="font-size: large;"><strong><br>
</strong></span></p>
<p><span style="font-size: large;"><strong>这里我想用一句简单的话话概括这篇日志的重点</strong></span></p>
<p><span style="font-size: large;"><strong>——虽然我们看到的是一个平面，但是我们在这平面背后操作的是一个立体图形！</strong></span></p>
<p><span style="font-size: x-large;"><strong>——————————————————————————————</strong></span></p>
<p><span style="font-size: medium;"><strong><br>
</strong></span></p>
<p><strong><span style="font-size: medium;">好了，现在能够计算出</span>v1，v2，θ和旋转轴，这个四个东西已经能够满足一般的旋转动画的变量需求了，一般的3D模型旋转动画程序都是需要这四个变量——当然还有一些很强劲的dll提供的接口已经是很人性化了，只将二维的鼠标坐标跟3D模型传进去函数即可。</strong><strong>虽然我弄了这些这些公式推导，但</strong><strong>在实际生活中，我也会试着去找别人写好高级类库来完成工作，因为这个理论的推导用的是球体，忽略了3D模型的具体外在形式，现实生活中的模型，不可能那么完美的嵌入到球体中，有可能是需要椭圆体，这个时候利用上面的推导会出现很严重的快速转移错误——因为高度变窄，鼠标稍微移动就能产生大幅度的旋转，这种旋转是快速而错误的！</strong></p>
<p><span style="font-size: medium;"><strong>这仅仅是一个问题，还有各种变焦，摄像机角度更换的更深层次的</strong></span></p>
</div>
</div>
</div>

    </div><!-- .entry-content -->


    
</article>
                

            
        </div>
    </div>

    
    
    


</div>

</div>



    
    
    
    


</div>


</body></html>